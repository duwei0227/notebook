<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>PyCryptodome使用笔记</title>
    <link href="/2022/05/26/2022-05-7-PyCryptodome%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/"/>
    <url>/2022/05/26/2022-05-7-PyCryptodome%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h3 id="一、安装"><a href="#一、安装" class="headerlink" title="一、安装"></a>一、安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">pip install pycryptodome<br></code></pre></td></tr></table></figure><h3 id="二、包模块介绍"><a href="#二、包模块介绍" class="headerlink" title="二、包模块介绍"></a>二、包模块介绍</h3><table><thead><tr><th>包名</th><th>描述</th></tr></thead><tbody><tr><td><code>Crypto.Cipher</code></td><td>数据的加密、解密模块，例如 <code>AES</code></td></tr><tr><td><code>Crypto.Signature</code></td><td>数据的签名、验签</td></tr><tr><td><code>Crypto.Hash</code></td><td>消息摘要</td></tr><tr><td><code>Crypto.PublicKey</code></td><td>用于公钥的生成、导出和导入</td></tr><tr><td><code>Crypto.Random</code></td><td>用于生成随机数据</td></tr><tr><td><code>Crypto.Util</code></td><td>工具类，例如数据填充</td></tr></tbody></table><h4 id="1、Crypto-PublicKey"><a href="#1、Crypto-PublicKey" class="headerlink" title="1、Crypto.PublicKey"></a>1、Crypto.PublicKey</h4><p>用于公钥、私钥证书的生成以及证书格式转换(字符串)</p><p><code>pycryptodome</code>支持的Key类型：</p><ul><li><a href="https://www.pycryptodome.org/en/latest/src/public_key/rsa.html">RSA keys</a></li><li><a href="https://www.pycryptodome.org/en/latest/src/public_key/dsa.html">DSA keys</a></li><li><a href="https://www.pycryptodome.org/en/latest/src/public_key/ecc.html">Elliptic Curve keys</a></li></ul><p>在导入公钥、私钥时，需要进行格式填充</p><p><code>RSA</code>私钥文件结构：</p><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vbnet">-----BEGIN RSA <span class="hljs-keyword">PRIVATE</span> <span class="hljs-keyword">KEY</span>-----<br>私钥正文<br>-----<span class="hljs-keyword">END</span> RSA <span class="hljs-keyword">PRIVATE</span> <span class="hljs-keyword">KEY</span>-----<br></code></pre></td></tr></table></figure><p><code>RSA</code>公钥文件：</p><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vbnet">-----BEGIN <span class="hljs-keyword">PUBLIC</span> <span class="hljs-keyword">KEY</span>-----<br>公钥正文<br>-----<span class="hljs-keyword">END</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-keyword">KEY</span>-----<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 生成私钥、公钥</span><br><span class="hljs-comment"># bits指定生成的私钥文件大小</span><br><span class="hljs-comment"># passphrase指定私钥文件加密密码</span><br>key = RSA.generate(bits=<span class="hljs-number">2048</span>)<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;private_key.pem&#x27;</span>, <span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> fp:<br>    fp.write(key.export_key(<span class="hljs-built_in">format</span>=<span class="hljs-string">&#x27;PEM&#x27;</span>, passphrase=<span class="hljs-string">&#x27;123456&#x27;</span>))<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;public_key.pem&#x27;</span>, <span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> fp:<br>    fp.write(key.publickey().export_key())<br>    <br><span class="hljs-comment"># 导入公钥、私钥文件</span><br>private_key_start = <span class="hljs-string">&#x27;-----BEGIN RSA PRIVATE KEY-----&#x27;</span><br>private_key_end = <span class="hljs-string">&#x27;-----END RSA PRIVATE KEY-----&#x27;</span><br>public_key_start = <span class="hljs-string">r&#x27;-----BEGIN PUBLIC KEY-----&#x27;</span><br>public_key_end = <span class="hljs-string">r&#x27;-----END PUBLIC KEY-----&#x27;</span><br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;private_key.pem&#x27;</span>, <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> fp:<br>    pk = fp.read().decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> pk.startswith(private_key_start):<br>        pk = private_key_start + pk<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> pk.endswith(private_key_end):<br>            pk += private_key_end<br>            private_key = RSA.import_key(pk, passphrase=<span class="hljs-string">&#x27;123456&#x27;</span>)<br></code></pre></td></tr></table></figure><h4 id="2、Crypto-Cipher"><a href="#2、Crypto-Cipher" class="headerlink" title="2、Crypto.Cipher"></a>2、Crypto.Cipher</h4><p><code>Cipher</code>模块用于数据的加密和解密</p><ul><li><p>对称算法：双方使用相同的密钥进行数据的加密和解密。对称加密的速度通常比较快，代表有 <code>AES</code>,<code>DES3</code></p></li><li><p>非对称算法</p><p>发送方和接收方使用不同的密钥。发送方使用公钥（非机密）加密，而接收方使用私钥（机密）解密。非对称密钥通常很慢。代表有 <code>PKCS#1 OAEP (RSA)</code></p></li></ul><p><code>pycryptodome</code>支持的算法：</p><ul><li><a href="https://www.pycryptodome.org/en/latest/src/cipher/des.html">Single DES</a> and <a href="https://www.pycryptodome.org/en/latest/src/cipher/des3.html">Triple DES</a> (block ciphers)</li><li><a href="https://www.pycryptodome.org/en/latest/src/cipher/arc2.html">RC2</a> (block cipher)</li><li><a href="https://www.pycryptodome.org/en/latest/src/cipher/arc4.html">ARC4</a> (stream cipher)</li><li><a href="https://www.pycryptodome.org/en/latest/src/cipher/blowfish.html">Blowfish</a> (block cipher)</li><li><a href="https://www.pycryptodome.org/en/latest/src/cipher/cast.html">CAST-128</a> (block cipher)</li><li><a href="https://www.pycryptodome.org/en/latest/src/cipher/pkcs1_v1_5.html">PKCS#1 v1.5 encryption (RSA)</a> (asymmetric cipher)</li></ul><h5 id="AES-Advanced-Encryption-Standard"><a href="#AES-Advanced-Encryption-Standard" class="headerlink" title="AES(Advanced Encryption Standard)"></a>AES(Advanced Encryption Standard)</h5><p><code>AES</code>具有16字节的固定数据块大小。它的密钥可以是128、192或256位(bit)长。</p><ul><li>使用ECB(Electronic Code Book)进行数据的加密解密：</li></ul><p>    <code>ECB</code>将加密的数据分成若干组，每组的大小跟加密密钥长度相同，然后每组都用相同的密钥进行加密。所以在加密的时候需要对明文数据进行填充保证数据的长度是密码长度的倍数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 数据加密</span><br>plain_text = <span class="hljs-string">b&#x27;hello&#x27;</span><br>key = get_random_bytes(<span class="hljs-number">16</span>)<br>cipher = AES.new(key, AES.MODE_ECB)<br>ct_bytes = cipher.encrypt(pad(plain_text, AES.block_size))<br>enc_data = base64.b64encode(ct_bytes).decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br><br><br><span class="hljs-comment">#数据解密</span><br>enc_data = <span class="hljs-string">&#x27;/zgUiJHvUyu1h+wr9evHCA==&#x27;</span><br>key = <span class="hljs-string">&#x27;dhcvKhdF3kwoXUjGTmK3Ww==&#x27;</span><br>cipher = AES.new(base64.b64decode(key), AES.MODE_ECB)<br>pad_plain_data = cipher.decrypt(base64.b64decode(enc_data))<br>plain_data = unpad(pad_plain_data, AES.block_size)<br><span class="hljs-built_in">print</span>(plain_data.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br></code></pre></td></tr></table></figure><ul><li><code>CBC</code>模式的加密首先也是将明文分成固定长度的块，然后将前面一个加密块输出的密文与下一个要加密的明文块进行异或操作，将计算结果再用密钥进行加密得到密文。第一明文块加密的时候，因为前面没有加密的密文，所以需要一个初始化向量。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 数据加密</span><br>plain_text = <span class="hljs-string">b&#x27;hello&#x27;</span><br>key = get_random_bytes(<span class="hljs-number">16</span>)<br><span class="hljs-comment"># 初始偏移量可以不指定，如果不指定非随机生成</span><br>iv = get_random_bytes(<span class="hljs-number">16</span>)<br>cipher = AES.new(key, AES.MODE_CBC, iv=iv)<br>ct_bytes = cipher.encrypt(pad(plain_text, AES.block_size))<br>enc_data = base64.b64encode(ct_bytes).decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;加密密文==&#x27;</span>, enc_data)<br><br><span class="hljs-comment"># 数据解密</span><br>cipher = AES.new(key, AES.MODE_CBC, iv=iv)<br>pad_plain_data = cipher.decrypt(base64.b64decode(enc_data))<br>plain_text = unpad(pad_plain_data, AES.block_size).decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;解密后明文==&#x27;</span>, plain_text)<br></code></pre></td></tr></table></figure><h5 id="RSA"><a href="#RSA" class="headerlink" title="RSA"></a>RSA</h5><p><code>RSA</code>加解密一般是公钥加密，私钥解密;<code>PyCryptodome</code>当前建议使用 <code>PKCS1_OAEP</code>算法；如果加解密双方为 <code>Python</code>与 <code>Java</code>且 <code>Java</code>端采用 <code>RSA/ECB/PKCS1Padding</code>时，<code>Python</code>端需要采用 <code>PKCS1_v1_5</code></p><p><strong>加解密模块为：</strong><code>Crypto.Cipher</code>模块</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">import</span> base<span class="hljs-number">64</span><br><span class="hljs-attribute">from</span> Crypto.Cipher import PKCS<span class="hljs-number">1</span>_OAEP, PKCS<span class="hljs-number">1</span>_v<span class="hljs-number">1</span>_<span class="hljs-number">5</span><br><span class="hljs-attribute">from</span> Crypto.PublicKey import RSA<br><br><span class="hljs-comment"># 数据加密--公钥</span><br><span class="hljs-attribute">data</span> = <span class="hljs-string">&quot;I met aliens in UFO. Here is the map.&quot;</span>.encode(<span class="hljs-string">&quot;utf-8&quot;</span>)<br><span class="hljs-attribute">with</span> open(&#x27;public_key.pem&#x27;, mode=&#x27;rb&#x27;) as fp:<br>    <span class="hljs-comment"># 如果是读取字符串公钥需要补齐字符串格式</span><br>    <span class="hljs-attribute">public_key</span> = RSA.import_key(fp.read())<br>    <span class="hljs-attribute">cipher_rsa</span> = PKCS<span class="hljs-number">1</span>_v<span class="hljs-number">1</span>_<span class="hljs-number">5</span>.new(public_key)<br>    <span class="hljs-comment">#cipher_rsa = PKCS1_OAEP.new(public_key)</span><br>    <span class="hljs-attribute">enc_data</span> = cipher_rsa.encrypt(data)<br>    <span class="hljs-attribute">print</span>(base<span class="hljs-number">64</span>.b<span class="hljs-number">64</span>encode(enc_data).decode(&#x27;utf-<span class="hljs-number">8</span>&#x27;))<br>    <br><span class="hljs-comment"># 数据解密--私钥</span><br><span class="hljs-attribute">enc_data</span> = &#x27;rDrJC<span class="hljs-number">9</span>aaAmL<span class="hljs-number">5</span>szCKzPy<span class="hljs-number">1</span>peJ/Yx<span class="hljs-number">8</span>noKuBEDFsUGSjDQgxRId<span class="hljs-number">3</span>jgG<span class="hljs-number">9</span>fAVuXpJnqRtHL+RXncOLuqRtKVowyt<span class="hljs-number">5</span>H<span class="hljs-number">3</span>Ag/KZm+<span class="hljs-number">7</span>RJDeY<span class="hljs-number">7</span>nT<span class="hljs-number">3</span>AvgUiy<span class="hljs-number">0</span>xfQgZChOW<span class="hljs-number">63</span>BDoIMFIDZqXv<span class="hljs-number">5</span>yPwqoMDT<span class="hljs-number">2</span>Tz<span class="hljs-number">3</span>Yj<span class="hljs-number">7</span>FWYb<span class="hljs-number">5</span>/<span class="hljs-number">0</span>zbbFbJqwyA<span class="hljs-number">3</span>knY<span class="hljs-number">2</span>vUOFOp/YyqpZ<span class="hljs-number">7</span>gzzyKjgAgi<span class="hljs-number">8</span>pWgEDs<span class="hljs-number">2</span>bXMirGIWA<span class="hljs-number">1</span>McHFVdDfHF<span class="hljs-number">7</span>Xi<span class="hljs-number">2</span>s<span class="hljs-number">2</span>Ob<span class="hljs-number">2</span>oHylW<span class="hljs-number">7</span>rJT<span class="hljs-number">9</span>SXfQh<span class="hljs-number">0</span>CPvWRxTstv<span class="hljs-number">6</span>e<span class="hljs-number">8</span>GWRQo<span class="hljs-number">4</span>qYK/qGxqGQfLexSw<span class="hljs-number">2</span>/o<span class="hljs-number">10</span>DIAsYOxN<span class="hljs-number">9</span>xubVKPLA+jXQchSH<span class="hljs-number">7</span>Z/Js<span class="hljs-number">2</span>g<span class="hljs-number">9</span>t<span class="hljs-number">3</span>WSI<span class="hljs-number">8027</span>JXg//HTB<span class="hljs-number">5</span>AO<span class="hljs-number">74</span>A==&#x27;<br><span class="hljs-attribute">with</span> open(&#x27;private_key.pem&#x27;, mode=&#x27;rb&#x27;) as fp:<br>    <span class="hljs-comment"># 如果是读取字符串公钥需要补齐字符串格式</span><br>    <span class="hljs-attribute">pk</span> = RSA.import_key(fp.read(), passphrase=&#x27;<span class="hljs-number">123456</span>&#x27;)<br>    <span class="hljs-attribute">cipher</span> = PKCS<span class="hljs-number">1</span>_v<span class="hljs-number">1</span>_<span class="hljs-number">5</span>.new(pk)<br>    <span class="hljs-comment">#sentinel:当发生错误时返回对象</span><br>    <span class="hljs-attribute">plain_data_byte</span> = cipher.decrypt(base<span class="hljs-number">64</span>.b<span class="hljs-number">64</span>decode(enc_data), sentinel=&#x27;no&#x27;)<br>    <span class="hljs-comment"># PKCS1_OAEP解密</span><br>    <span class="hljs-comment">#cipher = PKCS1_OAEP.new(pk)</span><br>    <span class="hljs-comment">#plain_data_byte = cipher.decrypt(base64.b64decode(enc_data))</span><br>    <span class="hljs-attribute">print</span>(plain_data_byte.decode(&#x27;utf-<span class="hljs-number">8</span>&#x27;))<br><br></code></pre></td></tr></table></figure><h4 id="3、Crypto-Signature"><a href="#3、Crypto-Signature" class="headerlink" title="3、Crypto.Signature"></a>3、Crypto.Signature</h4><p><code>RSA</code>使用私钥签名，公钥验签；签名验签在 <code>Crypto.Signature</code>模块包提供</p><p><code>pycryptodome</code>支持的算法：</p><ul><li><a href="https://www.pycryptodome.org/en/latest/src/signature/pkcs1_v1_5.html">PKCS#1 v1.5 (RSA)</a></li><li><a href="https://www.pycryptodome.org/en/latest/src/signature/pkcs1_pss.html">PKCS#1 PSS (RSA)</a></li><li><a href="https://www.pycryptodome.org/en/latest/src/signature/dsa.html">Digital Signature Algorithm (DSA and ECDSA)</a></li></ul><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">import</span> base<span class="hljs-number">64</span><br><span class="hljs-attribute">from</span> Crypto.PublicKey import RSA<br><span class="hljs-attribute">from</span> Crypto.Signature import PKCS<span class="hljs-number">1</span>_v<span class="hljs-number">1</span>_<span class="hljs-number">5</span><br><br><span class="hljs-attribute">plain_data</span> = <span class="hljs-string">&quot;Hello, World!!&quot;</span><br><span class="hljs-attribute">with</span> open(&#x27;private_key.pem&#x27;, mode=&#x27;rb&#x27;) as fp:<br>    <span class="hljs-comment"># 如果是读取字符串公钥需要补齐字符串格式</span><br>    <span class="hljs-attribute">private_key</span> = RSA.import_key(fp.read(), passphrase=&#x27;<span class="hljs-number">123456</span>&#x27;)<br>    <span class="hljs-attribute">hash_data</span> = SHA<span class="hljs-number">256</span>.new(plain_data.encode(&#x27;utf-<span class="hljs-number">8</span>&#x27;))<br>    <span class="hljs-attribute">sign_data</span> = PKCS<span class="hljs-number">1</span>_v<span class="hljs-number">1</span>_<span class="hljs-number">5</span>.new(private_key).sign(hash_data)<br>    <span class="hljs-attribute">print</span>(base<span class="hljs-number">64</span>.b<span class="hljs-number">64</span>encode(sign_data).decode(&#x27;utf-<span class="hljs-number">8</span>&#x27;))<br>    <br><span class="hljs-comment"># 验签</span><br><span class="hljs-attribute">plain_data</span> = <span class="hljs-string">&quot;Hello, World!!&quot;</span><br><span class="hljs-attribute">sign_data</span> = &#x27;itVttV<span class="hljs-number">7</span>vTzB<span class="hljs-number">8</span>OoglNtuPn<span class="hljs-number">2</span>PgpRzpZ<span class="hljs-number">3</span>ILOnLWQDAqiOuQig<span class="hljs-number">9</span>Whs<span class="hljs-number">0</span>a<span class="hljs-number">6</span>ht<span class="hljs-number">5</span>P<span class="hljs-number">3</span>oc<span class="hljs-number">1</span>baUZ<span class="hljs-number">6</span>PfVksSNzuPd<span class="hljs-number">8</span>sNaR<span class="hljs-number">9</span>eQeKkaSiuiJP<span class="hljs-number">11</span>BJ<span class="hljs-number">8</span>cugPuSyn&#x27;<br><span class="hljs-attribute">with</span> open(&#x27;public_key.pem&#x27;, mode=&#x27;rb&#x27;) as fp:<br>    <span class="hljs-attribute">hash_data</span> = SHA<span class="hljs-number">256</span>.new(plain_data.encode(&#x27;utf-<span class="hljs-number">8</span>&#x27;))<br>    <span class="hljs-attribute">public_key</span> = RSA.import_key(fp.read())<br>    <span class="hljs-attribute">try</span>:<br>        <span class="hljs-attribute">PKCS1_v1_5</span>.new(public_key).verify(hash_data, signature=base<span class="hljs-number">64</span>.b<span class="hljs-number">64</span>decode(sign_data))<br>    <span class="hljs-attribute">except</span> Exception as e:<br>        <span class="hljs-attribute">print</span>(&#x27;验签失败&#x27;, e)<br></code></pre></td></tr></table></figure><h4 id="4、Crypto-Hash"><a href="#4、Crypto-Hash" class="headerlink" title="4、Crypto.Hash"></a>4、Crypto.Hash</h4><p><code>Hash</code>模块主要用于消息摘要</p><p><code>pycryptodome</code>支持的算法：</p><ul><li><p>SHA-2 family (FIPS 180-4)</p><ul><li><a href="https://www.pycryptodome.org/en/latest/src/hash/sha224.html">SHA-224</a></li><li><a href="https://www.pycryptodome.org/en/latest/src/hash/sha256.html">SHA-256</a></li><li><a href="https://www.pycryptodome.org/en/latest/src/hash/sha384.html">SHA-384</a></li><li><a href="https://www.pycryptodome.org/en/latest/src/hash/sha512.html">SHA-512, SHA-512/224, SHA-512/256</a></li></ul></li><li><p>SHA-3 family (FIPS 202)</p><ul><li><a href="https://www.pycryptodome.org/en/latest/src/hash/sha3_224.html">SHA3-224</a></li><li><a href="https://www.pycryptodome.org/en/latest/src/hash/sha3_256.html">SHA3-256</a></li><li><a href="https://www.pycryptodome.org/en/latest/src/hash/sha3_384.html">SHA3-384</a></li><li><a href="https://www.pycryptodome.org/en/latest/src/hash/sha3_512.html">SHA3-512</a></li><li><a href="https://www.pycryptodome.org/en/latest/src/hash/tuplehash128.html">TupleHash128</a></li><li><a href="https://www.pycryptodome.org/en/latest/src/hash/tuplehash256.html">TupleHash256</a></li></ul></li><li><p>BLAKE2</p><ul><li><a href="https://www.pycryptodome.org/en/latest/src/hash/blake2s.html">BLAKE2s</a></li><li><a href="https://www.pycryptodome.org/en/latest/src/hash/blake2b.html">BLAKE2b</a></li></ul></li></ul><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">cal_hash256</span>(<span class="hljs-params">data: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">str</span>:</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    sha256计算</span><br><span class="hljs-string"></span><br><span class="hljs-string">    :param data: 需要计算hash值的文本字符串</span><br><span class="hljs-string"></span><br><span class="hljs-string">    :return 十六进制hash值</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">return</span> SHA256.new(data.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)).hexdigest()<br></code></pre></td></tr></table></figure><h3 id="三、参考"><a href="#三、参考" class="headerlink" title="三、参考"></a>三、参考</h3><p><a href="https://www.pycryptodome.org/en/latest/">https://www.pycryptodome.org/en/latest/</a></p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Python使用ElementTree操作XML</title>
    <link href="/2022/05/26/2022-05-10-Python%E4%BD%BF%E7%94%A8ElementTree%E6%93%8D%E4%BD%9CXML%20copy/"/>
    <url>/2022/05/26/2022-05-10-Python%E4%BD%BF%E7%94%A8ElementTree%E6%93%8D%E4%BD%9CXML%20copy/</url>
    
    <content type="html"><![CDATA[<p>  本篇使用<code>xml.etree.ElementTree</code>模块进行xml文件的解析和创建。<code>ET</code>有两个主要的类用于xml的解析和构建-<code>ElementTree</code>将整个XML文档作为一棵树，<code>Element</code>代表树中的一个节点。</p><h3 id="一、解析XML"><a href="#一、解析XML" class="headerlink" title="一、解析XML"></a>一、解析XML</h3><p>示例 XML 文档：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">data</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">country</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Liechtenstein&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">rank</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">rank</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">year</span>&gt;</span>2008<span class="hljs-tag">&lt;/<span class="hljs-name">year</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">gdppc</span>&gt;</span>141100<span class="hljs-tag">&lt;/<span class="hljs-name">gdppc</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">neighbor</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Austria&quot;</span> <span class="hljs-attr">direction</span>=<span class="hljs-string">&quot;E&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">neighbor</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Switzerland&quot;</span> <span class="hljs-attr">direction</span>=<span class="hljs-string">&quot;W&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">country</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">country</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Singapore&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">rank</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">rank</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">year</span>&gt;</span>2011<span class="hljs-tag">&lt;/<span class="hljs-name">year</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">gdppc</span>&gt;</span>59900<span class="hljs-tag">&lt;/<span class="hljs-name">gdppc</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">neighbor</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Malaysia&quot;</span> <span class="hljs-attr">direction</span>=<span class="hljs-string">&quot;N&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">country</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">country</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Panama&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">rank</span>&gt;</span>68<span class="hljs-tag">&lt;/<span class="hljs-name">rank</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">year</span>&gt;</span>2011<span class="hljs-tag">&lt;/<span class="hljs-name">year</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">gdppc</span>&gt;</span>13600<span class="hljs-tag">&lt;/<span class="hljs-name">gdppc</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">neighbor</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Costa Rica&quot;</span> <span class="hljs-attr">direction</span>=<span class="hljs-string">&quot;W&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">neighbor</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Colombia&quot;</span> <span class="hljs-attr">direction</span>=<span class="hljs-string">&quot;E&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">country</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">data</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="1、从文件中解析XML文档"><a href="#1、从文件中解析XML文档" class="headerlink" title="1、从文件中解析XML文档"></a>1、从文件中解析XML文档</h4><p>使用<code>parse(file_name)</code>方法解析xml文件，<code>parse</code>返回<code>ElementTree</code>对象,使用<code>getroot()</code>获取根节点对象</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml">import xml.etree.ElementTree as ET<br><br>tree = ET.parse(xml文件全路径)<br>root = tree.getroot()<br>print(root.tag)<br></code></pre></td></tr></table></figure><h4 id="2、从字符串中解析XML文档"><a href="#2、从字符串中解析XML文档" class="headerlink" title="2、从字符串中解析XML文档"></a>2、从字符串中解析XML文档</h4><p><code>fromstring()</code>方法从一个字符串中解析xml对象，返回的对象为 <code>Element</code>，该对象为xml元素树的根(<code>root</code>)节点对象</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml">import xml.etree.ElementTree as ET<br><br>root = ET.fromstring(country_data_as_string)<br></code></pre></td></tr></table></figure><h4 id="3、解析带有命名空间-Namespace-的XML文档"><a href="#3、解析带有命名空间-Namespace-的XML文档" class="headerlink" title="3、解析带有命名空间(Namespace)的XML文档"></a>3、解析带有命名空间(Namespace)的XML文档</h4><p>如果xml文档有声明命名空间时，解析后的文档 标签(<code>tags</code>)和属性(<code>attributes</code>)都会添加一个前缀，前缀格式为<code>&#123;uri&#125;sometag</code>,其中<code>uri</code>为完整的<code>namespace</code>地址，在进行元素的操作时都需要添加前缀(<code>prefix</code>)</p><p>在如下示例中包含两个命名空间，一个以前缀<code>fictional</code>开头，其他的采用默认命名空间</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">actors</span> <span class="hljs-attr">xmlns:fictional</span>=<span class="hljs-string">&quot;http://characters.example.com&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://people.example.com&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">actor</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>John Cleese<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">fictional:character</span>&gt;</span>Lancelot<span class="hljs-tag">&lt;/<span class="hljs-name">fictional:character</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">fictional:character</span>&gt;</span>Archie Leach<span class="hljs-tag">&lt;/<span class="hljs-name">fictional:character</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">actor</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">actor</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>Eric Idle<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">fictional:character</span>&gt;</span>Sir Robin<span class="hljs-tag">&lt;/<span class="hljs-name">fictional:character</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">fictional:character</span>&gt;</span>Gunther<span class="hljs-tag">&lt;/<span class="hljs-name">fictional:character</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">fictional:character</span>&gt;</span>Commander Clement<span class="hljs-tag">&lt;/<span class="hljs-name">fictional:character</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">actor</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">actors</span>&gt;</span><br></code></pre></td></tr></table></figure><p>文档里解析与方法1或者方法2相同，区别在与解析后的文档对象</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml">root = ET.fromstring(xml_doc)<br>print(root.tag)<br><br>输出：&#123;http://people.example.com&#125;actors<br></code></pre></td></tr></table></figure><h3 id="二、元素查找"><a href="#二、元素查找" class="headerlink" title="二、元素查找"></a>二、元素查找</h3><h4 id="1、iter-tag-None"><a href="#1、iter-tag-None" class="headerlink" title="1、iter(tag=None)"></a>1、iter(tag=None)</h4><p>​    使用当前元素作为根元素构建一颗迭代(<code>iterator</code>)树，会迭代当前元素及其所有子元素(包括非直接子元素)。如果<code>tag</code>不为<code>None</code>或者为<code>*</code>时，仅仅匹配元素的<code>tag</code>与当前传入的<code>tag</code>一致的对象</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"># 迭代所有元素<br>for e in element.iter(t ag=&#x27;*&#x27;):<br>print(e.tag)<br><br># 迭代所有 neighbor<br>for e in element.iter(tag=&#x27;neighbor&#x27;):<br>    print(e.attrib)<br><br><br></code></pre></td></tr></table></figure><h4 id="2、findall-match-namespaces-None"><a href="#2、findall-match-namespaces-None" class="headerlink" title="2、findall(match, namespaces=None)"></a>2、findall(<em>match</em>, <em>namespaces=None</em>)</h4><p>查找所有匹配的直接子元素，查询条件可以是标签名称(<code>tag name</code>)或者<code>xpath</code>。返回所有匹配元素列表<code>list</code>,元素顺序按照文档顺序排序。<code>namespace</code>是一个可选的条件，用于匹配包含命名空间的文档</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"># 查找文档根节点下所有的country<br>for e in element.findall(&#x27;country&#x27;):<br>print(e.attrib)<br><br><br></code></pre></td></tr></table></figure><h4 id="3、find-match-namespaces-None"><a href="#3、find-match-namespaces-None" class="headerlink" title="3、find(match, namespaces=None)"></a>3、find(<em>match</em>, <em>namespaces=None</em>)</h4><p>查找第一个符合条件的直接子元素，查询条件可以是标签名称(<code>tag name</code>)或者<code>xpath</code>。返回匹配的元素实例或者4<code>None</code>,元素顺序按照文档顺序排序。<code>namespace</code>是一个可选的条件，用于匹配包含命名空间的文档</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"># 查找第一个匹配的 country<br>first_element = element.find(&#x27;country&#x27;)<br>print(first_element.attrib)<br><br></code></pre></td></tr></table></figure><h4 id="4、get-key-default-None"><a href="#4、get-key-default-None" class="headerlink" title="4、get(key, default=None)"></a>4、get(<em>key</em>, <em>default=None</em>)</h4><p>根据<code>key</code>获取元素属性值，如果属性不存在返回一个默认值</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"># 查找第一个匹配的 country<br>first_element = element.find(&#x27;country&#x27;)<br>print(first_element.attrib)<br><br># 查找 name 属性<br>first_element.get(&#x27;name&#x27;)<br><br># 查找不存在的属性<br>first_element.get(&#x27;haha&#x27;, default=&#x27;^_^&#x27;)<br></code></pre></td></tr></table></figure><h4 id="5、xpath"><a href="#5、xpath" class="headerlink" title="5、xpath"></a>5、xpath</h4><p><code>ElementTree</code>支持的<code>xpath</code>语法，以下示例从 <code>root</code>节点开始解析</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml">import xml.etree.ElementTree as ET<br><br>root = ET.fromstring(countrydata)<br></code></pre></td></tr></table></figure><table><thead><tr><th>语法</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td><code>tag</code></td><td>匹配所有与给定tag匹配的直接子元素。从<code>Python3.8</code>开始支持<code>*</code>: <code>&#123;namespace&#125;*</code>匹配给定命名空间下所有元素；<code>&#123;*&#125;spam</code>匹配所有<code>tag</code>名为<code>spam</code>的元素，前边命名空间可以为任意;<code>&#123;&#125;*</code>匹配未限定命名空间的元素</td><td><code>element.findall(&#39;country&#39;)</code><br><code>element.findall(&#39;&#123;&#125;*&#39;)</code></td></tr><tr><td><code>*</code></td><td>查找所有的子元素，包含注释和处理指令。例如<code>*/egg</code>匹配所有孙辈的<code>egg</code>元素</td><td>当前元素的所有直接子元素<code>element.findall(&#39;*&#39;)</code></td></tr><tr><td><code>.</code></td><td>查找当前元素节点。通常用于在相对路径中的起始节点</td><td>当前元素下所有的<code>year</code><br><code>element.findall(&#39;./country/year&#39;)</code></td></tr><tr><td><code>//</code></td><td>选择当前元素下所有级别上的所有子元素(可以跳过元素的层级查找)。例如<code>//egg</code>选择整个树中的所有<code>egg</code>元素</td><td><code>element.findall(&#39;.//rank&#39;)</code></td></tr><tr><td><code>..</code></td><td>选择父元素。如果路径试图到达起始元素（已调用元素find）的祖先，则返回None。</td><td>查找<code>rank</code>的父元素<code>element.findall(&#39;.//rank/..&#39;)</code></td></tr><tr><td><code>[@attrib]</code></td><td>选择具有给定属性的所有元素。</td><td>查找当前元素下所有包含direction属性的元素<code>element.findall(&#39;.//*[@direction]&#39;)</code></td></tr><tr><td><code>[@attrib=&#39;value&#39;]</code></td><td>选择给定属性具有给定值的所有元素。该值不能包含引号。</td><td>查找当前元素下所有包含direction属性且值等于E的元素<br><code>element.findall(&#39;.//*[@direction=&quot;E&quot;]&#39;</code></td></tr><tr><td><code>[@attrib!=&#39;value&#39;]</code></td><td>选择给定属性没有给定值的所有元素。该值不能包含引号。<br/>3.10版新增。</td><td>查找当前元素下所有包含direction属性且值不等于E的元素<br/><code>element.findall(&#39;.//*[@direction!=&quot;E&quot;]&#39;)</code></td></tr><tr><td><code>[tag]</code></td><td>选择具有名为tag的子元素的所有元素。只支持直系子女。</td><td>过滤子元素中包含<code>year</code>的<code>country</code>元素element.findall(‘./country/[year]’)`</td></tr><tr><td><code>[.=&#39;text&#39;]</code></td><td>选择其完整文本内容（包括子体）等于给定文本的所有元素。<br/><br/>在3.7版中新增。</td><td>过滤文本值为2011的<code>year</code>元素<code>element.findall(&#39;.//year[.=&quot;2011&quot;]&#39;)</code></td></tr><tr><td><code>[.!=&#39;text&#39;]</code></td><td>选择其完整文本内容（包括子体）不等于给定文本的所有元素。<br/><br/>3.10版新增。</td><td>过滤文本值不等于2011的<code>year</code>元素<code>element.findall(&#39;.//year[.!=&quot;2011&quot;]&#39;)</code></td></tr><tr><td><code>[tag=&#39;text&#39;]</code></td><td>选择所有元素，这些元素具有一个名为tag的子元素，该子元素的完整文本内容（包括子元素）等于给定的文本。</td><td>过滤子元素为<code>year</code>且<code>year</code>的文本值为2011的元素<br><code>element.findall(&#39;*/[year=&quot;2011&quot;]&#39;)</code></td></tr><tr><td><code>[tag!=&#39;text&#39;]</code></td><td>选择所有具有名为tag的子元素且其完整文本内容（包括子元素）不等于给定文本的元素。<br/><br/>3.10版新增。</td><td>过滤子元素为<code>year</code>且<code>year</code>的文本值不等于2011的元素<br/><code>element.findall(&#39;*/[year!=&quot;2011&quot;]&#39;)</code></td></tr><tr><td><code>[position]</code></td><td>选择位于给定位置的所有图元。位置可以是整数（1是第一个位置）、表达式last（）（表示最后一个位置）或相对于最后一个位置的位置（例如last（）-1）。</td><td>查找当前元素下第二个元素<code>element.findall(&#39;*[2]&#39;)[0].get(&#39;name&#39;)</code></td></tr></tbody></table><h3 id="三、修改XML文档"><a href="#三、修改XML文档" class="headerlink" title="三、修改XML文档"></a>三、修改XML文档</h3><p>初始文档：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&#x27;1.0&#x27; encoding=&#x27;utf-8&#x27;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">grandparent</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--我是儿子a--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;a&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">child</span>&gt;</span>my father is a<span class="hljs-tag">&lt;/<span class="hljs-name">child</span>&gt;</span> <span class="hljs-comment">&lt;!--我是儿子b--&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;b&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">child</span>&gt;</span>my father is b<span class="hljs-tag">&lt;/<span class="hljs-name">child</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">grandparent</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="1、修改元素文本"><a href="#1、修改元素文本" class="headerlink" title="1、修改元素文本"></a>1、修改元素文本</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">first_child = root.find(<span class="hljs-string">&#x27;./parent/child&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;修改前：&#x27;</span>, first_child.text)<br>first_child.text = <span class="hljs-string">&#x27;我的父节点是a&#x27;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;修改后：&#x27;</span>, first_child.text)<br></code></pre></td></tr></table></figure><h4 id="2、修改已有元素属性"><a href="#2、修改已有元素属性" class="headerlink" title="2、修改已有元素属性"></a>2、修改已有元素属性</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">first_parent = root.find(<span class="hljs-string">&#x27;./parent&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;修改前name：&#x27;</span>, first_parent.get(<span class="hljs-string">&#x27;name&#x27;</span>))<br>first_parent.<span class="hljs-built_in">set</span>(<span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-string">&#x27;A&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;修改后name：&#x27;</span>, first_parent.get(<span class="hljs-string">&#x27;name&#x27;</span>))<br></code></pre></td></tr></table></figure><h4 id="3、新增属性"><a href="#3、新增属性" class="headerlink" title="3、新增属性"></a>3、新增属性</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">first_parent = root.find(<span class="hljs-string">&#x27;./parent&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;新增age前：&#x27;</span>, first_parent.get(<span class="hljs-string">&#x27;age&#x27;</span>))<br>first_parent.<span class="hljs-built_in">set</span>(<span class="hljs-string">&#x27;age&#x27;</span>, <span class="hljs-string">&#x27;18&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;新增age后：&#x27;</span>, first_parent.get(<span class="hljs-string">&#x27;age&#x27;</span>))<br></code></pre></td></tr></table></figure><h4 id="4、删除元素"><a href="#4、删除元素" class="headerlink" title="4、删除元素"></a>4、删除元素</h4><p>删除元素使用<code>remove()</code>方法需要传入一个 <code>Element</code>对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">first_parent.remove(first_parent.find(<span class="hljs-string">&#x27;./child&#x27;</span>))<br></code></pre></td></tr></table></figure><h3 id="四、构建XML文档"><a href="#四、构建XML文档" class="headerlink" title="四、构建XML文档"></a>四、构建XML文档</h3><p>使用<code>Element</code>构建根节点元素，不断使用<code>SubElement</code>组合构建子元素</p><p>所有的元素构建完成以后需要使用<code>ElementTree</code>创建一颗文档树，用于<code>XML</code>文件的生成</p><p>使用<code>Comment</code>生成文档注释，并使用<code>Element.append()</code>方法追加在想要的位置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python">root = Element(<span class="hljs-string">&#x27;grandparent&#x27;</span>)<br>comment_a = Comment(<span class="hljs-string">&#x27;我是儿子a&#x27;</span>)<br>root.append(comment_a)<br>parent = SubElement(root, <span class="hljs-string">&#x27;parent&#x27;</span>, attrib=&#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;a&quot;</span>&#125;)<br>child = SubElement(parent, <span class="hljs-string">&#x27;child&#x27;</span>)<br>child.text = <span class="hljs-string">&#x27;my father is a&#x27;</span><br>comment_b = Comment(<span class="hljs-string">&#x27;我是儿子b&#x27;</span>)<br>parent.append(comment_b)<br>parent_brother = SubElement(root, <span class="hljs-string">&#x27;parent&#x27;</span>, attrib=&#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;b&quot;</span>&#125;)<br>child_brother = SubElement(parent_brother, <span class="hljs-string">&#x27;child&#x27;</span>)<br>child_brother.text = <span class="hljs-string">&#x27;my father is b&#x27;</span><br><span class="hljs-comment"># 临时xml结构查看</span><br><span class="hljs-comment"># ET.dump(root)</span><br><br>tree = ET.ElementTree(root)<br><span class="hljs-comment"># xml_declaration 用于生成xml文档声明</span><br><span class="hljs-comment"># 将xml文档写入文件</span><br>tree.write(<span class="hljs-string">&#x27;test.xml&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>, xml_declaration=<span class="hljs-literal">True</span>, short_empty_elements=<span class="hljs-literal">True</span>)<br><br></code></pre></td></tr></table></figure><p>写入xml文档有两种方法：</p><ul><li><pre><code class="python">tree = ET.ElementTree(root)tree.write(&#39;test.xml&#39;, encoding=&#39;utf-8&#39;, xml_declaration=True, short_empty_elements=True)</code></pre></li><li><p><code>ET.canonicalize(ET.dump(root))</code></p></li></ul><h4 id="五、附录"><a href="#五、附录" class="headerlink" title="五、附录"></a>五、附录</h4><p><strong>Python3</strong>文档：<a href="https://docs.python.org/3/library/xml.etree.elementtree.html">https://docs.python.org/3/library/xml.etree.elementtree.html</a></p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>算法概要介绍</title>
    <link href="/2022/05/10/2022-05-26-%E7%AE%97%E6%B3%95%E6%A6%82%E8%A6%81%E4%BB%8B%E7%BB%8D/"/>
    <url>/2022/05/10/2022-05-26-%E7%AE%97%E6%B3%95%E6%A6%82%E8%A6%81%E4%BB%8B%E7%BB%8D/</url>
    
    <content type="html"><![CDATA[<h3 id="一、对称算法"><a href="#一、对称算法" class="headerlink" title="一、对称算法"></a>一、对称算法</h3><p>对称算法使用一个密钥。给定一个明文和一个密钥，加密产生密文，其长度和明文大致相同。解密时，使用读密钥与加密密钥相同。</p><p>​ 对称算法主要有四种加密模式：</p><p>(1) 电子密码本模式 Electronic Code Book(ECB)</p><p>这种模式是最早采用和最简单的模式，它将加密的数据分成若干组，每组的大小跟加密密钥长度相同，然后每组都用相同的密钥进行加密。</p><p>其缺点是：电子编码薄模式用一个密钥加密消息的所有块，如果原消息中重复明文块，则加密消息中的相应密文块也会重复，因此，电子编码薄模式适于加密小消息。</p><p>（2）加密块链模式 Cipher Block Chaining(CBC)</p><p>CBC模式的加密首先也是将明文分成固定长度的块，然后将前面一个加密块输出的密文与下一个要加密的明文块进行异或操作，将计算结果再用密钥进行加密得到密文。第一明文块加密的时候，因为前面没有加密的密文，所以需要一个初始化向量。跟ECB方式不一样，通过连接关系，使得密文跟明文不再是一一对应的关系，破解起来更困难，而且克服了只要简单调换密文块可能达到目的的攻击。</p><p>（3）加密反馈模式 Cipher Feedback Mode(CFB)</p><p>面向字符的应用程序的加密要使用流加密法，可以使用加密反馈模式。在此模式下，数据用更小的单元加密，如可以是8位，这个长度小于定义的块长（通常是64位）。其加密步骤是：</p><p>a） 使用64位的初始化向量。初始化向量放在移位寄存器中，在第一步加密，产生相应的64位初始化密文；<br>b) 始化向量最左边的8位与明文前8位进行异或运算，产生密文第一部分（假设为c），然后将c传输到接收方；</p><p>c) 向量的位（即初始化向量所在的移位寄存器内容）左移8位，使移位寄存器最右边的8位为不可预测的数据，在其中填入c的内容；<br>d) 第1-3步，直到加密所有的明文单元。</p><p>解密过程相反</p><p>4）输出反馈模式 Output Feedback Mode(OFB)</p><p>输出反馈模式与CFB相似，惟一差别是，CFB中密文填入加密过程下一阶段，而在OFB中，初始化向量加密过程的输入填入加密过程下一阶段。</p><h3 id="二、摘要算法"><a href="#二、摘要算法" class="headerlink" title="二、摘要算法"></a>二、摘要算法</h3><p>摘要算法是一种能产生特殊输出格式的算法，这种算法的特点是：无论用户输入什么长度的原始数据，经过计算后输出的密文都是固定长度的，这种算法的原理是根据一定的运算规则对原数据进行某种形式的提取，这种提取就是摘要，被摘要的数据内容与原数据有密切联系，只要原数据稍有改变，输出的“摘要”便完全不同，因此，基于这种原理的算法便能对数据完整性提供较为健全的保障。但是，由于输出的密文是提取原数据经过处理的定长值，所以它已经不能还原为原数据，即消息摘要算法是不可逆的，理论上无法通过反向运算取得原数据内容，因此它通常只能被用来做数据完整性验证。</p><p>如今常用的“消息摘要”算法经历了多年验证发展而保留下来的算法已经不多，这其中包括MD2、MD4、MD5、SHA、SHA-1/256/383/512等。</p><p>​ 常用的摘要算法主要有MD5和SHA256。D5的输出结果为16字节。</p><h3 id="三、公钥算法"><a href="#三、公钥算法" class="headerlink" title="三、公钥算法"></a>三、公钥算法</h3><p>在公钥密码系统中，加密和解密使用的是不同的密钥，这两个密钥之间存在着相互依存关系：即用其中任一个密钥加密的信息只能用另一个密钥进行解密。这使得通信双方无需事先交换密钥就可进行保密通信。其中加密密钥和算法是对外公开的，人人都可以通过这个密钥加密文件然后发给收信者，这个加密密钥又称为公钥；而收信者收到加密文件后,它可以使用他的解密密钥解密，这个密钥是由他自己私人掌管的，并不需要分发，因此又成称为私钥，这就解决了密钥分发的问题。</p><p>主要的公钥算法有：RSA、DSA、DH和ECC。</p><p>（1）RSA算法</p><p>当前最著名、应用最广泛的公钥系统RSA是在1978年，由美国麻省理工学院(MIT)的Rivest、Shamir和Adleman在题为《获得数字签名和公开钥密码系统的方法》的论文中提出的。它是一个基于数论的非对称(公开钥)密码体制，是一种分组密码体制。其名称来自于三个发明者的姓名首字母。 它的安全性是基于大整数素因子分解的困难性，而大整数因子分解问题是数学上的著名难题，至今没有有效的方法予以解决，因此可以确保RSA算法的安全性。RSA系统是公钥系统的最具有典型意义的方法，大多数使用公钥密码进行加密和数字签名的产品和标准使用的都是RSA算法。</p><p>RSA算法是第一个既能用于数据加密也能用于数字签名的算法，因此它为公用网络上信息的加密和鉴别提供了一种基本的方法。它通常是先生成一对RSA 密钥，其中之一是保密密钥，由用户保存；另一个为公开密钥，可对外公开，甚至可在网络服务器中注册，人们用公钥加密文件发送给个人，个人就可以用私钥解密接受。为提高保密强度，RSA密钥至少为500位长，一般推荐使用2048位。</p><p>RSA算法是R.Rivest、A.Shamir和L.Adleman于1977年在美国麻省理工学院开发，于1978年首次公布。</p><p>RSA公钥密码算法是目前网络上进行保密通信和数字签名的最有效的安全算法之一。RSA算法的安全性基于数论中大素数分解的困难性，所以，RSA需采用足够大的整数。因子分解越困难，密码就越难以破译，加密强度就越高。</p><p>其算法如下：</p><p>A. 选择两质数<em>p</em>、<em>q</em></p><p>B. 计算<em>n</em> = <em>p * q</em></p><p>C. 计算<em>n</em>的欧拉函数Φ(<em>n</em>) = (<em>p</em> - 1)(<em>q</em> - 1)</p><p>D. 选择整数<em>e</em>，使<em>e</em>与Φ(<em>n</em>)互质，且1 &lt; e &lt; Φ(<em>n</em>)</p><p>E. 计算<em>d</em>，使<em>d * e = 1 mod</em> <em>Φ(n)</em></p><p>其中，公钥KU＝{<em>e, n</em>}，私钥KR={<em>d, n</em>}。</p><p>加密/解密过程：</p><p>利用RSA加密，首先需将明文数字化，取长度小于log2n位的数字作为明文块。</p><p>对于明文块M和密文块C，加/解密的形式如下：</p><p>加密： C = Me mod n</p><p>解密： M = Cd mod n = (Me)d mod n = Med mod n</p><p>RSA的安全性基于大数分解质因子的困难性。因为若n被分解为<em>n</em> = <em>p * q</em>，则Φ(<em>n</em>)、<em>e</em>、<em>d</em>可依次求得。目前，因式分解速度最快的方法的时间复杂性为exp(sqrt(ln(n)lnln(n)))。统计数据表明，在重要应用中，使用512位的密钥已不安全，需要采用1024位的密钥。</p><p>（2）DSA算法</p><p>DSA（Digital Signature Algorithm，数字签名算法，用作数字签名标准的一部分），它是另一种公开密钥算法，它不能用作加密，只用作数字签名。DSA使用公开密钥，为接受者验证数据的完整性和数据发送者的身份。它也可用于由第三方去确定签名和所签数据的真实性。DSA算法的安全性基于解离散对数的困难性，这类签字标准具有较大的兼容性和适用性，成为网络安全体系的基本构件之一。</p><p>DSA签名算法中用到了以下参数：</p><p>p是L位长的素数，其中L从512到1024且是64的倍数。</p><p>q是160位长且与p-1互素的因子 ，其中h是小于p-1并且满足 大于1的任意数。</p><p>x是小于q的数。</p><p>另外，算法使用一个单向散列函数H（m）。标准指定了安全散列算法（SHA）。三个参数p，q和g是公开的，且可以被网络中所有的用户公有。私人密钥是x，公开密钥是y。</p><p>对消息m签名时：</p><p>（1） 发送者产生一个小于q的随机数k。</p><p>（2） 发送者产生：</p><p>r和s就是发送者的签名，发送者将它们发送给接受者。</p><p>（3） 接受者通过计算来验证签名：</p><p>如果v=r，则签名有效。</p><p>（3）Diffie-Hellman密钥交换</p><p>DH算法是W.Diffie和M.Hellman提出的。此算法是最早的公钥算法。它实质是一个通信双方进行密钥协定的协议：两个实体中的任何一个使用自己的私钥和另一实体的公钥，得到一个对称密钥，这一对称密钥其它实体都计算不出来。DH算法的安全性基于有限域上计算离散对数的困难性。离散对数的研究现状表明：所使用的DH密钥至少需要1024位，才能保证有足够的中、长期安全。</p><p>(4) 椭圆曲线密码体制(ECC)</p><p>1985年，N. Koblitz和V. Miller分别独立提出了椭圆曲线密码体制(ECC)，其依据就是定义在椭圆曲线点群上的离散对数问题的难解性。</p><p>为了用椭圆曲线构造密码系统，首先需要找到一个单向陷门函数，椭圆曲线上的数量乘就是这样的单向陷门函数。</p><p>椭圆曲线的数量乘是这样定义的：设E为域K上的椭圆曲线，G为E上的一点，这个点被一个正整数k相乘的乘法定义为 k个G相加，因而有</p><p>kG = G + G + … + G (共有k个G)</p><p>若存在椭圆曲线上的另一点N ≠ G，满足方程kG = N。容易看出，给定k和G，计算N相对容易。而给定N和G，计算k = logG N相对困难。这就是椭圆曲线离散对数问题。</p><p>离散对数求解是非常困难的。椭圆曲线离散对数问题比有限域上的离散对数问题更难求解。对于有理点数有大素数因子的椭圆离散对数问题，目前还没有有效的攻击方法。</p><p>参考：</p><p><a href="https://www.openssl.net.cn/">https://www.openssl.net.cn/</a></p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Shell日常使用记录</title>
    <link href="/2022/04/08/2022-03-22-Shell%E6%97%A5%E5%B8%B8%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/"/>
    <url>/2022/04/08/2022-03-22-Shell%E6%97%A5%E5%B8%B8%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h3 id="一、使用find查找某个日期以后修改的文件"><a href="#一、使用find查找某个日期以后修改的文件" class="headerlink" title="一、使用find查找某个日期以后修改的文件"></a>一、使用find查找某个日期以后修改的文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">find . -newermt &quot;2022-03-22&quot; -type f<br></code></pre></td></tr></table></figure><p>此处的日期可以使用变量替换实现动态查询<br>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">curr_date=$(date &quot;+%Y-%m-%d&quot;)<br>find . -newermt &quot;$&#123;curr_date&#125;&quot; -type f<br></code></pre></td></tr></table></figure><h3 id="二、Shell中使用Map对象"><a href="#二、Shell中使用Map对象" class="headerlink" title="二、Shell中使用Map对象"></a>二、Shell中使用Map对象</h3><h4 id="1、Map声明"><a href="#1、Map声明" class="headerlink" title="1、Map声明"></a>1、Map声明</h4><p>方式一：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">declare -A myMap<br>myMap[&quot;key&quot;]=&quot;value&quot;<br></code></pre></td></tr></table></figure><p>方式二：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">declare -A myMap=([&quot;key1&quot;]=&quot;value1&quot; [&quot;key2&quot;]=&quot;value2&quot;)<br></code></pre></td></tr></table></figure><h4 id="2、获取Map的大小"><a href="#2、获取Map的大小" class="headerlink" title="2、获取Map的大小"></a>2、获取Map的大小</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">echo &quot;$&#123;#myMap[@]&#125;&quot;<br></code></pre></td></tr></table></figure><h4 id="3、输出所有的Key"><a href="#3、输出所有的Key" class="headerlink" title="3、输出所有的Key"></a>3、输出所有的Key</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">echo &quot;$&#123;!myMap[@]&#125;&quot;<br></code></pre></td></tr></table></figure><h4 id="4、输出所有的Value"><a href="#4、输出所有的Value" class="headerlink" title="4、输出所有的Value"></a>4、输出所有的Value</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">echo &quot;$&#123;myMap[@]&#125;&quot;<br></code></pre></td></tr></table></figure><h4 id="5、遍历Map对象"><a href="#5、遍历Map对象" class="headerlink" title="5、遍历Map对象"></a>5、遍历Map对象</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 遍历所有的key</span><br>for key in $&#123;!myMap[@]&#125;;<br>do<br>    echo &quot;key=$&#123;key&#125;&quot;<br>    echo &quot;value=$&#123;myMap[$&#123;key&#125;]&#125;&quot;<br>done<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 遍历所有的value</span><br>for value in $&#123;myMap[@]&#125;;<br>do<br>    echo &quot;value=$&#123;value&#125;&quot;<br>done<br></code></pre></td></tr></table></figure><h3 id="三、使用awk实现数据分组统计"><a href="#三、使用awk实现数据分组统计" class="headerlink" title="三、使用awk实现数据分组统计"></a>三、使用awk实现数据分组统计</h3><p>数据实例：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs 1c">苹果<span class="hljs-string">|1</span><br>香蕉<span class="hljs-string">|2</span><br>苹果<span class="hljs-string">|1</span><br>香蕉<span class="hljs-string">|2</span><br>苹果<span class="hljs-string">|1</span><br></code></pre></td></tr></table></figure><h4 id="1、对数据分组后统计出现次数"><a href="#1、对数据分组后统计出现次数" class="headerlink" title="1、对数据分组后统计出现次数"></a>1、对数据分组后统计出现次数</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> -F 指定分隔符为 |</span><br><span class="hljs-meta">#</span><span class="bash"> count[<span class="hljs-variable">$1</span>] 按照第一列数据进行分组统计</span><br>awk -F &#x27;|&#x27; &#x27;&#123;count[$1]++;&#125; END &#123;for(i in count) &#123;print i &quot;=&quot; count[i]&#125;&#125;&#x27; test.txt<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Shell</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>MySQL数据库表关联</title>
    <link href="/2022/01/19/2022-01-19-MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A1%A8%E5%85%B3%E8%81%94/"/>
    <url>/2022/01/19/2022-01-19-MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A1%A8%E5%85%B3%E8%81%94/</url>
    
    <content type="html"><![CDATA[<pre><code>在实际业务项目中经常会存在不同的业务表进行关联查询的需要，本文从如下几个方式讲解。</code></pre><h3 id="1、where"><a href="#1、where" class="headerlink" title="1、where"></a>1、where</h3><p>语法格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">from</span> a, b <span class="hljs-keyword">where</span> a.id <span class="hljs-operator">=</span> b.id<br></code></pre></td></tr></table></figure><p><code>where</code>使用a表和b表的一个或者多个字段进行数据关联，如果关联时其中一方没有符合条件的记录，那么查询结果返回为空</p><h4 id="1-1-a和b有一条记录匹配"><a href="#1-1-a和b有一条记录匹配" class="headerlink" title="1.1 a和b有一条记录匹配"></a>1.1 a和b有一条记录匹配</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> a, b <span class="hljs-keyword">where</span> a.id <span class="hljs-operator">=</span> b.id <span class="hljs-keyword">and</span> a.id <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<br><span class="hljs-operator">+</span><span class="hljs-comment">----+-----+----+-----+</span><br><span class="hljs-operator">|</span> id <span class="hljs-operator">|</span> var <span class="hljs-operator">|</span> id <span class="hljs-operator">|</span> var <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----+-----+----+-----+</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">2</span> <span class="hljs-operator">|</span> C   <span class="hljs-operator">|</span>  <span class="hljs-number">2</span> <span class="hljs-operator">|</span> D   <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----+-----+----+-----+</span><br><span class="hljs-number">1</span> <span class="hljs-type">row</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br></code></pre></td></tr></table></figure><h4 id="1-2-a和b表数据量不匹配"><a href="#1-2-a和b表数据量不匹配" class="headerlink" title="1.2 a和b表数据量不匹配"></a>1.2 a和b表数据量不匹配</h4><p>当a和b表匹配条件的数据量不一致时，所有符合条件的记录都会返回;数据量少的一方会将结果进行复制拼接返回到客户端 </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> a, b <span class="hljs-keyword">where</span> a.id <span class="hljs-operator">=</span> b.id <span class="hljs-keyword">and</span> a.id <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><span class="hljs-operator">+</span><span class="hljs-comment">----+-----+----+-----+</span><br><span class="hljs-operator">|</span> id <span class="hljs-operator">|</span> var <span class="hljs-operator">|</span> id <span class="hljs-operator">|</span> var <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----+-----+----+-----+</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">1</span> <span class="hljs-operator">|</span> B   <span class="hljs-operator">|</span>  <span class="hljs-number">1</span> <span class="hljs-operator">|</span> A   <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">1</span> <span class="hljs-operator">|</span> A   <span class="hljs-operator">|</span>  <span class="hljs-number">1</span> <span class="hljs-operator">|</span> A   <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----+-----+----+-----+</span><br><span class="hljs-number">2</span> <span class="hljs-keyword">rows</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.01</span> sec)<br></code></pre></td></tr></table></figure><h4 id="1-3-无匹配的记录"><a href="#1-3-无匹配的记录" class="headerlink" title="1.3 无匹配的记录"></a>1.3 无匹配的记录</h4><p>当根据条件匹配查询无记录时，<code>MySQL</code>不会返回任何记录</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> a, b <span class="hljs-keyword">where</span> a.id <span class="hljs-operator">=</span> b.id <span class="hljs-keyword">and</span> b.id <span class="hljs-operator">=</span> <span class="hljs-number">3</span>;<br><span class="hljs-keyword">Empty</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br></code></pre></td></tr></table></figure><h3 id="2、左关联left-join"><a href="#2、左关联left-join" class="headerlink" title="2、左关联left join"></a>2、左关联left join</h3><p>语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">xxx <span class="hljs-keyword">left</span> <span class="hljs-keyword">join</span> yyy <span class="hljs-keyword">on</span> <br></code></pre></td></tr></table></figure><p><code>left join</code>以左边表为驱动表(主表)，在进行数据匹配时，驱动表的记录只要符合查询条件都会返回，从表的记录如果符合查询条件会拼接到结果集右边，如果没有记录匹配设置字段值为<code>NULL</code>拼接到结果集右边返回到客户端</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> t1.<span class="hljs-operator">*</span>, t2.<span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> a t1 <span class="hljs-keyword">left</span> <span class="hljs-keyword">join</span> b t2 <span class="hljs-keyword">on</span> t1.id <span class="hljs-operator">=</span> t2.id <span class="hljs-keyword">where</span> t1.id <span class="hljs-keyword">in</span> (<span class="hljs-number">2</span>, <span class="hljs-number">4</span>);<br><span class="hljs-operator">+</span><span class="hljs-comment">----+-----+------+------+</span><br><span class="hljs-operator">|</span> id <span class="hljs-operator">|</span> var <span class="hljs-operator">|</span> id   <span class="hljs-operator">|</span> var  <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----+-----+------+------+</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">2</span> <span class="hljs-operator">|</span> C   <span class="hljs-operator">|</span>    <span class="hljs-number">2</span> <span class="hljs-operator">|</span> D    <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">4</span> <span class="hljs-operator">|</span> F   <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----+-----+------+------+</span><br><span class="hljs-number">2</span> <span class="hljs-keyword">rows</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br></code></pre></td></tr></table></figure><h3 id="3、右关联-right-join"><a href="#3、右关联-right-join" class="headerlink" title="3、右关联 right join"></a>3、右关联 right join</h3><p>语法格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">xxx <span class="hljs-keyword">right</span> <span class="hljs-keyword">join</span> yyy <span class="hljs-keyword">on</span> <br></code></pre></td></tr></table></figure><p><code>right join</code>和<code>left join</code>原理类似，只是驱动表是右边表,同样的优先匹配驱动表记录，驱动表的记录只要符合查询条件都会返回，从表的记录如果符合查询条件会拼接到结果集左边，如果没有记录匹配设置字段值为<code>NULL</code>拼接到结果集左边返回到客户端</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> t1.<span class="hljs-operator">*</span>, t2.<span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> a t1 <span class="hljs-keyword">right</span> <span class="hljs-keyword">join</span> b t2 <span class="hljs-keyword">on</span> t1.id <span class="hljs-operator">=</span> t2.id <span class="hljs-keyword">where</span> t2.id <span class="hljs-keyword">in</span> (<span class="hljs-number">2</span>, <span class="hljs-number">3</span>);<br><span class="hljs-operator">+</span><span class="hljs-comment">------+------+----+-----+</span><br><span class="hljs-operator">|</span> id   <span class="hljs-operator">|</span> var  <span class="hljs-operator">|</span> id <span class="hljs-operator">|</span> var <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">------+------+----+-----+</span><br><span class="hljs-operator">|</span>    <span class="hljs-number">2</span> <span class="hljs-operator">|</span> C    <span class="hljs-operator">|</span>  <span class="hljs-number">2</span> <span class="hljs-operator">|</span> D   <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span> <span class="hljs-operator">|</span>  <span class="hljs-number">3</span> <span class="hljs-operator">|</span> E   <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">------+------+----+-----+</span><br><span class="hljs-number">2</span> <span class="hljs-keyword">rows</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br></code></pre></td></tr></table></figure><h3 id="4、union并集关联"><a href="#4、union并集关联" class="headerlink" title="4、union并集关联"></a>4、union并集关联</h3><p>语法格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> xxx <span class="hljs-keyword">from</span> a <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> yyy <span class="hljs-keyword">from</span> b; <br></code></pre></td></tr></table></figure><p><code>union</code>操作不需要<code>left join</code>或<code>right join</code>的<code>on</code>进行条件关联，但是查询结果字段位数需要一一对应，<code>union</code>操作会将结果集进行纵向合并返回;各自的<code>sql</code>语句独立可以有自己的<code>where</code>条件</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> t1.<span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> a t1 <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> t2.<span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> b t2;<br><span class="hljs-operator">+</span><span class="hljs-comment">----+-----+</span><br><span class="hljs-operator">|</span> id <span class="hljs-operator">|</span> var <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----+-----+</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">1</span> <span class="hljs-operator">|</span> A   <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">1</span> <span class="hljs-operator">|</span> B   <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">2</span> <span class="hljs-operator">|</span> C   <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">4</span> <span class="hljs-operator">|</span> F   <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">2</span> <span class="hljs-operator">|</span> D   <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">3</span> <span class="hljs-operator">|</span> E   <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----+-----+</span><br><span class="hljs-number">6</span> <span class="hljs-keyword">rows</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.01</span> sec)<br></code></pre></td></tr></table></figure><p>查询子句包含<code>where</code>条件：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> t1.<span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> a t1 <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> t2.<span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> b t2 <span class="hljs-keyword">where</span> t2.id <span class="hljs-operator">=</span> <span class="hljs-number">1</span><br>    <span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span> ;<br><span class="hljs-operator">+</span><span class="hljs-comment">----+-----+</span><br><span class="hljs-operator">|</span> id <span class="hljs-operator">|</span> var <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----+-----+</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">1</span> <span class="hljs-operator">|</span> A   <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">1</span> <span class="hljs-operator">|</span> B   <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">2</span> <span class="hljs-operator">|</span> C   <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">4</span> <span class="hljs-operator">|</span> F   <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----+-----+</span><br><span class="hljs-number">4</span> <span class="hljs-keyword">rows</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br></code></pre></td></tr></table></figure><h3 id="5、附录"><a href="#5、附录" class="headerlink" title="5、附录"></a>5、附录</h3><h4 id="5-1-建表语句"><a href="#5-1-建表语句" class="headerlink" title="5.1 建表语句"></a>5.1 建表语句</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> a (<br>    id <span class="hljs-type">int</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,<br>    val <span class="hljs-type">varchar</span>(<span class="hljs-number">5</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span><br>);<br><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> b(<br>    id <span class="hljs-type">int</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,<br>    val <span class="hljs-type">varchar</span>(<span class="hljs-number">5</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span><br>);<br></code></pre></td></tr></table></figure><h4 id="5-2-初始数据"><a href="#5-2-初始数据" class="headerlink" title="5.2 初始数据"></a>5.2 初始数据</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> a <span class="hljs-keyword">values</span> (<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;A&#x27;</span>), (<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;B&#x27;</span>), (<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;C&#x27;</span>), (<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;F&#x27;</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> b <span class="hljs-keyword">values</span> (<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;A&#x27;</span>), (<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;D&#x27;</span>), (<span class="hljs-number">3</span>, <span class="hljs-string">&#x27;E&#x27;</span>);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Python获取本机IP地址和Mac地址</title>
    <link href="/2022/01/07/2021-12-23-Python%E8%8E%B7%E5%8F%96%E6%9C%AC%E6%9C%BAip%E5%9C%B0%E5%9D%80%E5%92%8CMac%E5%9C%B0%E5%9D%80/"/>
    <url>/2022/01/07/2021-12-23-Python%E8%8E%B7%E5%8F%96%E6%9C%AC%E6%9C%BAip%E5%9C%B0%E5%9D%80%E5%92%8CMac%E5%9C%B0%E5%9D%80/</url>
    
    <content type="html"><![CDATA[<h3 id="1、获取IP地址"><a href="#1、获取IP地址" class="headerlink" title="1、获取IP地址"></a>1、获取IP地址</h3><p>此方法在<code>Windows</code>和<code>Linux</code>下都适用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> socket<br><br><span class="hljs-keyword">with</span> socket.socket(socket.AF_INET, socket.SOCK_DGRAM) <span class="hljs-keyword">as</span> client:<br>    client.connect((<span class="hljs-string">&#x27;8.8.8.8&#x27;</span>, <span class="hljs-number">80</span>))<br>    ip = client.getsockname()[<span class="hljs-number">0</span>]<br>    <br></code></pre></td></tr></table></figure><h3 id="2、获取MAC地址"><a href="#2、获取MAC地址" class="headerlink" title="2、获取MAC地址"></a>2、获取MAC地址</h3><p>目前暂未找到合适的获取mac地址的方法，在一些博客上找到的都是不准确的</p><p>暂时采用第三方库 <code>getmac</code> 获取</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">pip install getmac<br></code></pre></td></tr></table></figure><p>获取mac地址：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> getmac<br><br>getmac.get_mac_address()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>解决Chrome浏览器默认https访问</title>
    <link href="/2021/12/23/2021-12-23-%E8%A7%A3%E5%86%B3Chrome%E6%B5%8F%E8%A7%88%E5%99%A8%E9%BB%98%E8%AE%A4https%E9%97%AE%E9%A2%98/"/>
    <url>/2021/12/23/2021-12-23-%E8%A7%A3%E5%86%B3Chrome%E6%B5%8F%E8%A7%88%E5%99%A8%E9%BB%98%E8%AE%A4https%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h3 id="1、背景"><a href="#1、背景" class="headerlink" title="1、背景"></a>1、背景</h3><p>Chrome新版浏览器在访问网址时会默认添加http，对于一部分未支持https或者公司内部的项目来说很不友好</p><h3 id="2、解决方案"><a href="#2、解决方案" class="headerlink" title="2、解决方案"></a>2、解决方案</h3><h4 id="2-1-方案一"><a href="#2-1-方案一" class="headerlink" title="2.1 方案一"></a>2.1 方案一</h4><p>在Chrome浏览器地址栏输入以下内容：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">chrome:<span class="hljs-regexp">//</span>net-internals/<span class="hljs-comment">#hsts</span><br></code></pre></td></tr></table></figure><p><img src="/img/chrome-url-address.png"></p><p>找到 <code>Delete domain security policies</code><br>在<code>Domain</code>栏中输入需要删除的域名后点击<code>delete</code><br><img src="/img/chrome-delete-domain.png"></p>]]></content>
    
    
    <categories>
      
      <category>其他</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Http接口参数下划线转为驼峰式</title>
    <link href="/2021/12/06/2021-12-06-Http%E6%8E%A5%E5%8F%A3%E5%8F%82%E6%95%B0%E4%B8%8B%E5%88%92%E7%BA%BF%E8%BD%AC%E4%B8%BA%E9%A9%BC%E5%B3%B0%E5%BC%8F/"/>
    <url>/2021/12/06/2021-12-06-Http%E6%8E%A5%E5%8F%A3%E5%8F%82%E6%95%B0%E4%B8%8B%E5%88%92%E7%BA%BF%E8%BD%AC%E4%B8%BA%E9%A9%BC%E5%B3%B0%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p>Http接口参数下划线转为驼峰式</p><h3 id="1、背景"><a href="#1、背景" class="headerlink" title="1、背景"></a>1、背景</h3><p class="note note-info">Spring Boot项目</p>1、第三方系统接口参数格式为下划线形式,例如 `access_token`2、我方系统要求字段属性格式为驼峰式(或sonar要求)<h3 id="2、整体处理方式"><a href="#2、整体处理方式" class="headerlink" title="2、整体处理方式"></a>2、整体处理方式</h3><p>在对应实体类层级增加<code>JsonNaming</code>注解，同时属性字段定义为驼峰式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.PropertyNamingStrategy;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.annotation.JsonNaming;<br><br><span class="hljs-meta">@JsonNaming(value = PropertyNamingStrategy.SnakeCaseStrategy.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Token</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String appAccessToken<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Java知识点</title>
    <link href="/2021/12/06/2019-02-02-java/"/>
    <url>/2021/12/06/2019-02-02-java/</url>
    
    <content type="html"><![CDATA[<p>Java知识点</p><h3 id="1、Hibernate框架mysql数据库id主键自增"><a href="#1、Hibernate框架mysql数据库id主键自增" class="headerlink" title="1、Hibernate框架mysql数据库id主键自增"></a>1、Hibernate框架mysql数据库id主键自增</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span><br><span class="hljs-meta">@GenericGenerator(name = &quot;mySeq&quot;, strategy = &quot;increment&quot; )</span><br></code></pre></td></tr></table></figure><h3 id="2、Spring-Security去掉默认认证"><a href="#2、Spring-Security去掉默认认证" class="headerlink" title="2、Spring Security去掉默认认证"></a>2、Spring Security去掉默认认证</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"># spring boot <span class="hljs-number">2.</span>x<br><span class="hljs-meta">@SpringBootApplication(exclude = &#123;SecurityAutoConfiguration.class, ManagementWebSecurityAutoConfiguration.class&#125;)</span><br></code></pre></td></tr></table></figure><h3 id="3、字符串替换-或者"><a href="#3、字符串替换-或者" class="headerlink" title="3、字符串替换 $ 或者 \"></a>3、字符串替换 $ 或者 \</h3><h4 id="3-1-单个-符号-使用replace替换-–-能实现替换"><a href="#3-1-单个-符号-使用replace替换-–-能实现替换" class="headerlink" title="3.1 单个 $ 符号, 使用replace替换 – 能实现替换"></a>3.1 单个 $ 符号, 使用<code>replace</code>替换 – <strong>能实现替换</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">String singleDollar = <span class="hljs-string">&quot;abc$sef&quot;</span>;<br>System.out.println(singleDollar.replace(<span class="hljs-string">&quot;$&quot;</span>, <span class="hljs-string">&quot;\\$\\&quot;</span>));<br>System.out.println(singleDollar.replace(<span class="hljs-string">&quot;$&quot;</span>, <span class="hljs-string">&quot;_&quot;</span>));<br><br><span class="hljs-comment">// 输出结果</span><br>abc\$\sef<br>abc_sef<br></code></pre></td></tr></table></figure><h4 id="3-2-多个-符号，使用replaceAll替换-–-未能完成替换"><a href="#3-2-多个-符号，使用replaceAll替换-–-未能完成替换" class="headerlink" title="3.2 多个 $ 符号，使用replaceAll替换 – 未能完成替换"></a>3.2 多个 $ 符号，使用<code>replaceAll</code>替换 – <strong>未能完成替换</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">String multiDollar = <span class="hljs-string">&quot;abc$edf$mgl&quot;</span>;<br>System.out.println(multiDollar.replaceAll(<span class="hljs-string">&quot;\\\\$&quot;</span>, <span class="hljs-string">&quot;\\\\$\\\\&quot;</span>));<br>System.out.println(multiDollar.replaceAll(<span class="hljs-string">&quot;\\\\$&quot;</span>, <span class="hljs-string">&quot;_&quot;</span>));<br><br><span class="hljs-comment">// 输出结果</span><br>abc$edf$mgl<br>abc$edf$mgl<br></code></pre></td></tr></table></figure><h4 id="3-3-多个-符号，使用Matcher-quoteReplacement替换-–-完成替换且不需要太多的转义，推荐"><a href="#3-3-多个-符号，使用Matcher-quoteReplacement替换-–-完成替换且不需要太多的转义，推荐" class="headerlink" title="3.3 多个 $ 符号，使用Matcher.quoteReplacement替换  – 完成替换且不需要太多的转义，推荐"></a>3.3 多个 $ 符号，使用<code>Matcher.quoteReplacement</code>替换  – <strong>完成替换且不需要太多的转义，推荐</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">String multiDollar = <span class="hljs-string">&quot;abc$edf$mgl&quot;</span>;<br>System.out.println(multiDollar.replaceAll(Matcher.quoteReplacement(<span class="hljs-string">&quot;$&quot;</span>), Matcher.quoteReplacement(<span class="hljs-string">&quot;\\$\\&quot;</span>)));<br>System.out.println(multiDollar.replaceAll(Matcher.quoteReplacement(<span class="hljs-string">&quot;$&quot;</span>), Matcher.quoteReplacement(<span class="hljs-string">&quot;_&quot;</span>)));<br><br><span class="hljs-comment">// 输出结果</span><br>abc\$\edf\$\mgl<br>abc_edf_mgl<br></code></pre></td></tr></table></figure><h4 id="3-4-单个-符号，使用replace替换-–-完成替换"><a href="#3-4-单个-符号，使用replace替换-–-完成替换" class="headerlink" title="3.4 单个 $ 符号，使用replace替换 – 完成替换"></a>3.4 单个 $ 符号，使用<code>replace</code>替换 – <strong>完成替换</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">String singleSlash = <span class="hljs-string">&quot;abc\\abc&quot;</span>;<br>System.out.println(singleSlash.replace(<span class="hljs-string">&quot;\\&quot;</span>, <span class="hljs-string">&quot;\\\\&quot;</span>));<br>System.out.println(singleSlash.replace(<span class="hljs-string">&quot;\\&quot;</span>, <span class="hljs-string">&quot;_&quot;</span>));<br><br><span class="hljs-comment">// 输出结果</span><br>abc\\abc<br>abc_abc<br></code></pre></td></tr></table></figure><h4 id="3-5-多个-符号，使用replaceAll替换-–-可以替换"><a href="#3-5-多个-符号，使用replaceAll替换-–-可以替换" class="headerlink" title="3.5 多个 $ 符号，使用replaceAll替换 – 可以替换"></a>3.5 多个 $ 符号，使用<code>replaceAll</code>替换 – <strong>可以替换</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">String multiSlash = <span class="hljs-string">&quot;abc\\edf\\mgl&quot;</span>;<br>System.out.println(multiSlash.replaceAll(<span class="hljs-string">&quot;\\\\&quot;</span>, <span class="hljs-string">&quot;\\\\\\\\&quot;</span>));<br>System.out.println(multiSlash.replaceAll(<span class="hljs-string">&quot;\\\\&quot;</span>, <span class="hljs-string">&quot;_&quot;</span>));<br><br><span class="hljs-comment">// 输出结果</span><br>abc\\edf\\mgl<br>abc_edf_mgl<br></code></pre></td></tr></table></figure><h4 id="3-6-多个-符号，使用Matcher-quoteReplacement替换-–-可以替换-推荐"><a href="#3-6-多个-符号，使用Matcher-quoteReplacement替换-–-可以替换-推荐" class="headerlink" title="3.6 多个 $ 符号，使用Matcher.quoteReplacement替换 – 可以替换,推荐"></a>3.6 多个 $ 符号，使用<code>Matcher.quoteReplacement</code>替换 – <strong>可以替换,推荐</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">String multiSlash = <span class="hljs-string">&quot;abc\\edf\\mgl&quot;</span>;<br>System.out.println(multiSlash.replaceAll(Matcher.quoteReplacement(<span class="hljs-string">&quot;\\&quot;</span>), Matcher.quoteReplacement(<span class="hljs-string">&quot;\\\\&quot;</span>)));<br>System.out.println(multiSlash.replaceAll(Matcher.quoteReplacement(<span class="hljs-string">&quot;\\&quot;</span>), Matcher.quoteReplacement(<span class="hljs-string">&quot;_&quot;</span>)));<br><br><span class="hljs-comment">// 输出结果</span><br>abc\\edf\\mgl<br>abc_edf_mgl<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>使用Python操作MySql</title>
    <link href="/2021/12/06/2010-01-12-python%E6%93%8D%E4%BD%9Cmysql/"/>
    <url>/2021/12/06/2010-01-12-python%E6%93%8D%E4%BD%9Cmysql/</url>
    
    <content type="html"><![CDATA[<p>使用Python操作MySql</p><h3 id="一、准备"><a href="#一、准备" class="headerlink" title="一、准备"></a>一、准备</h3><ul><li>python <code>3.7.4 docker</code></li><li>mysql <code>Ver 8.0.18 for Linux on x86_64</code> docker</li><li>PyMySQL <code>pip install PyMySQL</code></li></ul><h3 id="二、注意事项"><a href="#二、注意事项" class="headerlink" title="二、注意事项"></a>二、注意事项</h3><ul><li>mysql host需要使用docker容器内部分配的ip(使用 <code>ifconfig</code>查看) – idea可以直接使用<code>localhost:映射端口</code>连接，有一定误导</li><li>事务不会自动提交，需要主动控制 <code>commit</code>或<code>rollback</code></li><li><code>drop</code>操作需要数据表实际存在（<code>drop table if exists user</code>）</li><li><code>create table</code>中<code>int(10)</code>在创建后的数据库表中字段大小<strong>10</strong>已经丢失，在当前数据库版本中会有警告</li><li>实际值大小要和字段匹配</li><li>占位符使用<code>%s</code>,参数使用元组(<code>(p,)</code>)</li><li>连接关闭建议使用<code>with</code>上下文管理，保证资源释放</li></ul><h3 id="三、主要代码"><a href="#三、主要代码" class="headerlink" title="三、主要代码"></a>三、主要代码</h3><h4 id="1、连接"><a href="#1、连接" class="headerlink" title="1、连接"></a>1、连接</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">self.db = pymysql.connect(host=self.host,<br>                                      user=self.user,<br>                                      password=self.password,<br>                                      database=self.database,<br>                                      port=self.port,<br>                                      charset=self.charset,<br>                                      cursorclass=self.cursorclass)<br>self.cursor = self.db.cursor()<br></code></pre></td></tr></table></figure><h4 id="2、执行execute"><a href="#2、执行execute" class="headerlink" title="2、执行execute"></a>2、执行<code>execute</code></h4><p><code>execute</code> 返回命中记录数<br>通过<code>cursor.fetchone</code>、<code>fetchall</code>、<code>fetchmany(size)</code>获取实际数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">select_sql = <span class="hljs-string">&#x27;select id, name, cellphone, balance, create_time, status from user where id = %s&#x27;</span><br><br>data_id = <span class="hljs-number">5</span>  <span class="hljs-comment"># 在insert完成结果中返回是最好的,待解决</span><br>cursor.execute(select_sql, (data_id, ))<br>result = cursor.fetchone()  <span class="hljs-comment"># 返回为dict, 一条</span><br><span class="hljs-comment"># result = cursor.fetchall()  # 返回为dict，全部</span><br><span class="hljs-comment"># result = cursor.fetchmany(size=5)  # 返回为dict，指定大小</span><br></code></pre></td></tr></table></figure><h4 id="3、事务"><a href="#3、事务" class="headerlink" title="3、事务"></a>3、事务</h4><p>此处使用数据库<code>connect</code>操作事务</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">self.connect.commit()<br>self.connect.rollback()<br></code></pre></td></tr></table></figure><h4 id="4、连接关闭"><a href="#4、连接关闭" class="headerlink" title="4、连接关闭"></a>4、连接关闭</h4><p>先关闭<code>cursor</code>在关闭<code>connect</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">cursor.close()<br>connect.close()<br></code></pre></td></tr></table></figure><p>参考：<br><a href="https://www.runoob.com/python3/python3-mysql.html">菜鸟教程</a></p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript知识点</title>
    <link href="/2021/12/06/2019-02-03-js-userless/"/>
    <url>/2021/12/06/2019-02-03-js-userless/</url>
    
    <content type="html"><![CDATA[<p>JavaScript知识点</p><h3 id="1、对象深拷贝-也可以用于合并"><a href="#1、对象深拷贝-也可以用于合并" class="headerlink" title="1、对象深拷贝,也可以用于合并"></a>1、对象深拷贝,也可以用于合并</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">$.extent(dest_obj, src_obj)<br></code></pre></td></tr></table></figure><h3 id="2、base64编码"><a href="#2、base64编码" class="headerlink" title="2、base64编码"></a>2、base64编码</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//编码</span><br><span class="hljs-built_in">window</span>.btoa(<span class="hljs-string">&#x27;base64)   // YmFzZTY0</span><br><span class="hljs-string"></span><br><span class="hljs-string">//解码</span><br><span class="hljs-string">window.atob(&#x27;</span>YmFzZTY0)  <span class="hljs-comment">// base64</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>SQL知识点</title>
    <link href="/2021/12/06/2019-03-04-sql/"/>
    <url>/2021/12/06/2019-03-04-sql/</url>
    
    <content type="html"><![CDATA[<p>SQL知识点记录</p><h3 id="1、Oracle查询支持正则化"><a href="#1、Oracle查询支持正则化" class="headerlink" title="1、Oracle查询支持正则化"></a>1、Oracle查询支持正则化</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> job <span class="hljs-keyword">where</span> regexp_like(name, <span class="hljs-string">&#x27;^[0-9]+&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="2、MySql索引相关"><a href="#2、MySql索引相关" class="headerlink" title="2、MySql索引相关"></a>2、MySql索引相关</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 查询表索引<br><span class="hljs-keyword">show</span> index <span class="hljs-keyword">from</span> table_name;<br><br># 创建索引<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> table_name <span class="hljs-keyword">add</span> <span class="hljs-keyword">unique</span> index (column_name);<br># 追加索引之前需要删除旧的索引，使用如下方式重新创建，否则索引不生效<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> table_name <span class="hljs-keyword">add</span> <span class="hljs-keyword">unique</span> index (column_old_index, column_new_index);<br><br># 删除索引<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> table_name <span class="hljs-keyword">drop</span> index column_name;<br></code></pre></td></tr></table></figure><h3 id="3、删除column"><a href="#3、删除column" class="headerlink" title="3、删除column"></a>3、删除column</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> table_name <span class="hljs-keyword">drop</span> <span class="hljs-keyword">column</span> column_name;<br></code></pre></td></tr></table></figure><h3 id="4、Mysql-字符串格式日期转换"><a href="#4、Mysql-字符串格式日期转换" class="headerlink" title="4、Mysql 字符串格式日期转换"></a>4、Mysql 字符串格式日期转换</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">str_to_date(date, format)<br>%Y:年<br>%m:月<br>%d:天<br>%H:时<br>%i:分<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>SQL</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Java普通类操作Spring Bean</title>
    <link href="/2021/12/06/2019-07-11-java%E6%99%AE%E9%80%9A%E7%B1%BB%E6%93%8D%E4%BD%9Cspring%20bean/"/>
    <url>/2021/12/06/2019-07-11-java%E6%99%AE%E9%80%9A%E7%B1%BB%E6%93%8D%E4%BD%9Cspring%20bean/</url>
    
    <content type="html"><![CDATA[<p>Java普通类操作Spring Bean</p><p>基于spring boot 1.5.6版本<br>synchronized 防止实例同时访问修改</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SpringBeanTool</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ApplicationContextAware</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> ApplicationContext applicationContext = <span class="hljs-keyword">null</span>;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setApplicationContext</span><span class="hljs-params">(ApplicationContext applicationContext)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (SpringBeanTool.applicationContext == <span class="hljs-keyword">null</span>) &#123;<br>            SpringBeanTool.applicationContext = applicationContext;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">synchronized</span> ApplicationContext <span class="hljs-title">getApplicationContext</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> applicationContext;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title">getBean</span><span class="hljs-params">(Class clazz)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> getApplicationContext().getBean(clazz);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>BufferedReader使用记录</title>
    <link href="/2021/12/06/2019-12-11-bufferedreader/"/>
    <url>/2021/12/06/2019-12-11-bufferedreader/</url>
    
    <content type="html"><![CDATA[<p>BufferedReader使用记录</p><p>一种以缓冲方式读取字符IO流，可以指定缓冲空间大小，默认为8192 </p><p>常见读取有如下三种方式：</p><h4 id="1、readline"><a href="#1、readline" class="headerlink" title="1、readline()"></a>1、readline()</h4><p>按行读取，解析IO流中的<code>\n</code>、<code>\r</code>、<code>\r\n</code>作为读取结束依据，不会解析字符串中的<code>\n</code>、<code>\r</code><br>以普通文件为例：按照回车符作为每一行的结束<br>以<code>shell</code>或<code>python</code>脚本为例：以每一个<code>echo</code>或者<code>print</code>或者<code>log</code>输出结束<br>示例：  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">String buffer;<br><span class="hljs-keyword">while</span> ((buffer = reader.readLine()) != <span class="hljs-keyword">null</span>) &#123;<br>    System.out.println(buffer);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2、read"><a href="#2、read" class="headerlink" title="2、read()"></a>2、read()</h4><p>一个字节一个的读取缓冲区，直到最后一个字节读取完成<br>示例：  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span> size = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> ((size = reader.read()) != -<span class="hljs-number">1</span>) &#123;<br>    <span class="hljs-comment">// 此处使用println时，会在每一个字符后换行，不是想要的结果</span><br>    System.out.print((<span class="hljs-keyword">char</span>)size);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3、read-char-targetCharArray-int-off-int-length"><a href="#3、read-char-targetCharArray-int-off-int-length" class="headerlink" title="3、read(char[] targetCharArray, int off, int length)"></a>3、read(char[] targetCharArray, int off, int length)</h4><p><code>targetCharArray</code>: 将读取到的内容存储到该字符数组，如果读取内容小于字符数组大小，会默认填充值，需要做处理<br><code>off</code>: 偏移量，从什么位置开始读取，一般设置为0，从原点读取，每次完整的读取一个<code>char</code>数组<br><code>length</code>：从缓冲区读取大小<br>示例：  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span> size = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">char</span>[] readChar = <span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span>[<span class="hljs-number">1024</span>];  <span class="hljs-comment">// 字符数组大小自定义</span><br>String buffer = <span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-keyword">while</span> ((size = reader.read(readChar, <span class="hljs-number">0</span>, readChar.length)) != -<span class="hljs-number">1</span>) &#123;<br>    <span class="hljs-comment">// 读取到的内容小于自定义字符数组，需要去除默认填充值</span><br>    <span class="hljs-keyword">if</span> (size &lt; readChar.length) &#123;<br>        <span class="hljs-keyword">char</span>[] newReaderChar = Arrays.copyOf(readChar, size);<br>        buffer = String.valueOf(newReaderChar);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        buffer = String.valueOf(readChar);<br>    &#125;<br>    System.out.println(buffer);<br>&#125;<br></code></pre></td></tr></table></figure><p>完整示例请访问：<a href="https://github.com/duwei0227/java-demo/blob/master/src/main/java/top/probiecoder/BufferedReaderDemo.java">BufferedReader</a></p><p><strong>如有理解不对之处，请指出，谢谢。</strong></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>自定义处理RestTemplate非200响应</title>
    <link href="/2021/12/06/2019-12-13-%E8%87%AA%E5%AE%9A%E4%B9%89%E5%A4%84%E7%90%86RestTemplate%E9%9D%9E200%E5%93%8D%E5%BA%94/"/>
    <url>/2021/12/06/2019-12-13-%E8%87%AA%E5%AE%9A%E4%B9%89%E5%A4%84%E7%90%86RestTemplate%E9%9D%9E200%E5%93%8D%E5%BA%94/</url>
    
    <content type="html"><![CDATA[<p>自定义处理RestTemplate非200响应</p><p><code>RestTemplate</code>对非200错误的响应默认做了处理，会丢失很多信息。尤其接口方在抛出错误的时候，将错误信息放在响应体的中；<br>这个时候如果不对响应做自定义处理是无法拿到响应结果的。  </p><p>自定义处理方式：  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RestTemplateResponseErrorHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ResponseErrorHandler</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">hasError</span><span class="hljs-params">(ClientHttpResponse response)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-comment">// 自定义响应码的正确性</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;   <span class="hljs-comment">// 认为所有结果都是正确的，转到上层处理</span><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">handleError</span><span class="hljs-params">(ClientHttpResponse response)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-comment">//对错误的处理，可以不做任何处理</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>单例模式的RestTemplate</title>
    <link href="/2021/12/06/2019-12-13-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E7%9A%84RestTemplage/"/>
    <url>/2021/12/06/2019-12-13-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E7%9A%84RestTemplage/</url>
    
    <content type="html"><![CDATA[<p>单例模式的RestTemplate</p><p>在<code>Spring Boot</code> 升级到 <code>2.0</code> 以后，无法使用 <code>@Autowired</code> 直接注入 <code>RestTemplate</code> , 需要通过 <code>RestTemplateBuilder</code> 产生。基于此实现了一个单例模式的工具类，用于获取 <code>RestTemplate</code>，同时学习单例模式的写法。   </p><p>以下方法基于 <code>Spring Boot 2.1.5.RELEASE</code>测试通过</p><p>本文实现了三种方式：  </p><h4 id="1、线程安全的懒汉模式"><a href="#1、线程安全的懒汉模式" class="headerlink" title="1、线程安全的懒汉模式"></a>1、线程安全的懒汉模式</h4><p>由于方法锁的缘由，在并发访问的时候效率会降低</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RestTemplateUtil</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> RestTemplate restTemplate;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">RestTemplateUtil</span><span class="hljs-params">()</span> </span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">synchronized</span> RestTemplate <span class="hljs-title">getRestTemplate</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (restTemplate == <span class="hljs-keyword">null</span>) &#123;<br>            restTemplate = <span class="hljs-keyword">new</span> RestTemplateBuilder().builder();<br>        &#125;<br>        <span class="hljs-keyword">return</span> restTemplate;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2、饿汉模式"><a href="#2、饿汉模式" class="headerlink" title="2、饿汉模式"></a>2、饿汉模式</h4><p>在类加载的时候初始化，常驻内存</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RestTemplateUtil</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> RestTemplate restTemplate = <span class="hljs-keyword">new</span> RestTemplateBuilder().builder();<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">RestTemplateUtil</span><span class="hljs-params">()</span> </span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">synchronized</span> RestTemplate <span class="hljs-title">getRestTemplate</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> restTemplate;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3、枚举方式"><a href="#3、枚举方式" class="headerlink" title="3、枚举方式"></a>3、枚举方式</h4><p>推荐方法，参考《Effective Java》</p><ul><li>自有序列号  </li><li>保证只有一个实例  </li><li>线程安全</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">RestTemplateUtil</span> </span>&#123;<br>    INSTANCE;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> RestTemplate <span class="hljs-title">getRestTemplate</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> RestTemplateBuilder().builder()<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4、私有类模式"><a href="#4、私有类模式" class="headerlink" title="4、私有类模式"></a>4、私有类模式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RestTemplateUtil</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LazySingleton</span> </span>&#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Singleton INSTANCE = <span class="hljs-keyword">new</span> RestTemplateUtil();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> RestTemplateUtil <span class="hljs-title">getRestTemplateUtil</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> LazySingleton.INSTANCE;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Spring Boot JMS</title>
    <link href="/2021/12/06/2020-02-05-spring-jms/"/>
    <url>/2021/12/06/2020-02-05-spring-jms/</url>
    
    <content type="html"><![CDATA[<p>Spring Boot JMS</p><p>   使用spring-jms实现简单异步消息队列，用于异步通知以及异步事务处理。<br>项目：</p><ul><li>spring boot 2.2.2</li><li>基于内存模式的activiMQ消息队列</li><li>使用默认的Container</li></ul><h4 id="一、pom依赖"><a href="#一、pom依赖" class="headerlink" title="一、pom依赖"></a>一、pom依赖</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;dependency&gt;<br>    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>    &lt;artifactId&gt;spring-boot-starter-activemq&lt;/artifactId&gt;<br>&lt;/dependency&gt;<br>&lt;dependency&gt;<br>    &lt;groupId&gt;org.apache.activemq&lt;/groupId&gt;<br>    &lt;artifactId&gt;activemq-broker&lt;/artifactId&gt;<br>&lt;/dependency&gt;<br>&lt;dependency&gt;<br>    &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;<br>    &lt;artifactId&gt;jackson-databind&lt;/artifactId&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><h4 id="二、JMS-config配置"><a href="#二、JMS-config配置" class="headerlink" title="二、JMS config配置"></a>二、JMS config配置</h4><p>进行文本的序列化(使用jackson)，支持对象参数<br>自定义ContainerFactory(自定义配置以后，需要在Listener处指定containerFactory)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">    自定义配置</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> JmsListenerContainerFactory&lt;?&gt; myFactory(ConnectionFactory connectionFactory,<br>                                                    DefaultJmsListenerContainerFactoryConfigurer configurer) &#123;<br>        DefaultJmsListenerContainerFactory factory = <span class="hljs-keyword">new</span> DefaultJmsListenerContainerFactory();<br>        configurer.configure(factory, connectionFactory);<br>        <span class="hljs-keyword">return</span> factory;<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span> <span class="hljs-comment">// 序列化文本,可以支持对象参数</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> MessageConverter <span class="hljs-title">jacksonJmsMessageConverter</span><span class="hljs-params">()</span> </span>&#123;<br>        MappingJackson2MessageConverter converter = <span class="hljs-keyword">new</span> MappingJackson2MessageConverter();<br>        converter.setTargetType(MessageType.TEXT);<br>        converter.setTypeIdPropertyName(<span class="hljs-string">&quot;_type&quot;</span>);   <span class="hljs-comment">// 不能为空,反序列化为object时需要</span><br>        <span class="hljs-keyword">return</span> converter;<br>    &#125;<br></code></pre></td></tr></table></figure><h4 id="三、消息生产者"><a href="#三、消息生产者" class="headerlink" title="三、消息生产者"></a>三、消息生产者</h4><ul><li>destinationName 消息消费者名称  </li><li>parameter 消费者所需参数，可以为对象<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> JmsTemplate jmsTemplate;<br><br>jmsTemplate.convertAndSend(destinationName, parameter);<br></code></pre></td></tr></table></figure></li></ul><h4 id="四、消息消费者"><a href="#四、消息消费者" class="headerlink" title="四、消息消费者"></a>四、消息消费者</h4><ul><li>destination 定义消费者名称，用户生产者调用；必须</li><li>containerFactory 指定自定义Container; 可选<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@JmsListener(destination = &quot;mailbox&quot;, containerFactory = &quot;myFactory&quot;)</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="五、其他"><a href="#五、其他" class="headerlink" title="五、其他"></a>五、其他</h4><p>需要在启动类允许jms <code>@EnableJms</code></p>]]></content>
    
    
    <categories>
      
      <category>JMS</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Java中的正则表达式</title>
    <link href="/2021/12/06/2020-02-20-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <url>/2021/12/06/2020-02-20-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p>Java中的正则表达式</p><h3 id="1、正则表达式语法"><a href="#1、正则表达式语法" class="headerlink" title="1、正则表达式语法"></a>1、正则表达式语法</h3><table><thead><tr><th>表达式</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td>字符</td><td></td><td></td></tr><tr><td><strong>.</strong></td><td>除换行符以外的任何字符，或者在DOTALL设置时表示任意字符</td><td>单独字符中的点不需要转义，后边跟着量词才有意义</td></tr><tr><td><code>\a,\e,\f,\n,\r,\t</code></td><td>响铃符，转义符，换页符，换行符，回车符，指标符</td><td>\n</td></tr><tr><td>字符类</td><td></td><td></td></tr><tr><td><code>[^...]</code></td><td>某个字符类的补集</td><td><code>[^\d\s]</code></td></tr><tr><td><code>[...&amp;&amp;...]</code></td><td>字符集的交集</td><td><code>[\p&#123;L&#125;&amp;&amp;[^A-Za-z]]</code></td></tr><tr><td><code>\d,\D</code></td><td>数字[0-9]\d+；它的补集</td><td></td></tr><tr><td><code>\w,\W</code></td><td>单词字符[a-zA-Z0-9]；它的补集</td><td></td></tr><tr><td><code>\s,\S</code></td><td>空白字符[ \n\r\t\f\x{8}]；他的补集</td><td></td></tr><tr><td><code>\h,\v,\H,\V</code></td><td>水平空白字符、垂直空白字符；他们的补集</td><td></td></tr><tr><td>群组</td><td></td><td></td></tr><tr><td><code>(X)</code></td><td>捕获X的匹配</td><td><code>([^&#39;]*)</code>捕获的是被引用的文本</td></tr><tr><td><code>\n</code></td><td>第<code>n</code>组</td><td><code>([&#39;&quot;]).*\1</code>可以匹配<code>&#39;Fred&#39;</code>和<code>&quot;Fred&quot;</code>,但是不能匹配<code>&quot;Fred&#39;</code></td></tr><tr><td>量词（默认为贪婪模式，尽可能的匹配）</td><td></td><td></td></tr><tr><td><code>X?</code></td><td>0或1次</td><td></td></tr><tr><td><code>X*</code></td><td>出现0次或多次</td><td></td></tr><tr><td><code>X+</code></td><td>至少出现一次</td><td></td></tr><tr><td><code>X&#123;n&#125;,X&#123;n,&#125;,X&#123;n,m&#125;</code></td><td>n个X，至少n个X，n到m个X</td><td></td></tr><tr><td><code>Q?</code>,其中Q是一个量词表达式</td><td>非贪婪模式，先尝试匹配最短模式,Q是一个无上限的量词</td><td><code>&#123;3&#125;</code>:只匹配<code>123</code>, <code>&#123;3,&#125;</code>:默认匹配全部<code>123...</code>，<code>&#123;3,&#125;</code>:匹配<code>123</code></td></tr><tr><td>边界匹配</td><td></td><td></td></tr><tr><td><code>^,$</code></td><td>输入的开头和结尾</td><td></td></tr><tr><td><code>\A,\Z,\z</code></td><td>输入的开头，输入的结尾，输入的绝对结尾</td><td></td></tr><tr><td><code>\b,\B</code></td><td>单词边界，非单词边界</td><td></td></tr><tr><td><code>R</code></td><td>Unicode行分隔符</td><td></td></tr><tr><td><code>\G</code></td><td>前一个匹配的结尾</td><td></td></tr><tr><td>其他</td><td></td><td></td></tr><tr><td><code>-</code></td><td>范围表示</td><td>0-3表示0，1，2，3</td></tr></tbody></table><h3 id="2、编译标志"><a href="#2、编译标志" class="headerlink" title="2、编译标志"></a>2、编译标志</h3><p><code>Pattern.compile(&quot;&quot;, Pattern.CASE_INSENSITIVE + Pattern.UNICODE_CASE)</code><br>标志|描述<br>-|-<br><code>Pattern.CASE_INSENSITIVE或r</code>|匹配字符时忽略字母的大小写，默认只考虑<code>US ASCII</code>字符|<br><code>Pattern.UNICODE_CASE</code>|与<code>CASE_INSENSITIVE</code>组合使用的时候，用<code>Unicode</code>字母的大小写来匹配|<br><code>Pattern.UNICODE_CHARACTER_CLASS或U</code>|选择<code>Unicode</code>字符类代替<code>POSIX</code>，其中蕴含了<code>UNICODE_CASE</code>|<br><code>Pattern.MULTILINE或m</code>|<code>^和$匹配行的开头和结尾，而不是整个输入的开头和结尾</code>|<br><code>Pattern.UNIX_LINES或d</code>|在多行模式中匹配<code>^</code>和<code>$</code>时，只有<code>\n</code>被识别成行终止符|<br><code>Pattern.DOTALL或s</code>|**.**匹配所有字符，包含行终止符|<br><code>Pattern.COMMENTS或x</code>|空白字符和注释(从#到行末尾)将被忽略|<br><code>Pattern.LITERAL</code>|该模式将被逐字地采纳，必须精确匹配，因字母大小写而造成的差异除外|<br><code>Pattern.CANON_EQ</code>|考虑<code>Unicode</code>字符规范的等价性|</p><h3 id="3、示例"><a href="#3、示例" class="headerlink" title="3、示例"></a>3、示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">String text = <span class="hljs-string">&quot;This is my personal info. My cellphone &quot;</span> +<br>                <span class="hljs-string">&quot;number 15301234567 and email probiecoder@gmail.com.Today i will learn regex&quot;</span>;<br></code></pre></td></tr></table></figure><h4 id="简单数值匹配"><a href="#简单数值匹配" class="headerlink" title="简单数值匹配"></a>简单数值匹配</h4><blockquote><p>默认模式-贪婪模式，尽可能的多匹配</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">String regex  = <span class="hljs-string">&quot;\\d&#123;3,&#125;&quot;</span>;<br>Pattern pattern = Pattern.compile(regex);<br>Matcher matcher = pattern.matcher(text);<br><span class="hljs-keyword">if</span> (matcher.find()) &#123;<br>    System.out.println(matcher.group());<br>&#125;<br>输出:<span class="hljs-number">15301234567</span><br></code></pre></td></tr></table></figure><blockquote><p>非贪婪模式</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">修改 regex = <span class="hljs-string">&quot;\\d&#123;3,&#125;&quot;</span><br>输出:<span class="hljs-number">153</span><br></code></pre></td></tr></table></figure><h4 id="email匹配"><a href="#email匹配" class="headerlink" title="email匹配"></a>email匹配</h4><p>涉及到 <strong>或</strong> 的使用<br>限制email后缀 <code>gmail.com qq.com 163.com</code> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">String regex = <span class="hljs-string">&quot;\\w&#123;3,&#125;@(gmail|qq|163).com&quot;</span>;<br>Pattern pattern = Pattern.compile(regex);<br>Matcher matcher = pattern.matcher(text);<br><span class="hljs-keyword">if</span> (matcher.find()) &#123;<br>    System.out.println(matcher.group());<br>&#125;<br>输出: probiecoder<span class="hljs-meta">@gmail</span>.com<br></code></pre></td></tr></table></figure><h4 id="限定字符匹配区域"><a href="#限定字符匹配区域" class="headerlink" title="限定字符匹配区域[]"></a>限定字符匹配区域<code>[]</code></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">[Jj]ava<br>匹配java、Java<br></code></pre></td></tr></table></figure><h4 id="分组匹配"><a href="#分组匹配" class="headerlink" title="分组匹配"></a>分组匹配</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">String text = <span class="hljs-string">&quot;java,Java,aJava,iJava&quot;</span>;<br>String regex = <span class="hljs-string">&quot;\\w+,(Java),aJava,(iJava)&quot;</span>;<br>Pattern pattern = Pattern.compile(regex);<br>Matcher matcher = pattern.matcher(text);<br><span class="hljs-keyword">if</span> (matcher.find()) &#123;<br>    System.out.println(matcher.group());   <span class="hljs-comment">// 输出整个匹配</span><br>    System.out.println(matcher.groupCount());  <span class="hljs-comment">// 匹配分组数</span><br>    System.out.println(matcher.group(<span class="hljs-number">1</span>));  <span class="hljs-comment">// 输出Java</span><br>    System.out.println(matcher.group(<span class="hljs-number">2</span>));  <span class="hljs-comment">// 输出iJava</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Path 常用方法介绍</title>
    <link href="/2021/12/06/2020-02-20-%E6%93%8D%E4%BD%9C%E6%96%87%E4%BB%B6/"/>
    <url>/2021/12/06/2020-02-20-%E6%93%8D%E4%BD%9C%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<p>Path 常用方法介绍</p><h3 id="一、Path"><a href="#一、Path" class="headerlink" title="一、Path"></a>一、Path</h3><h4 id="1、路径构建"><a href="#1、路径构建" class="headerlink" title="1、路径构建"></a>1、路径构建</h4><p>支持多级目录<br>当路径为相对路径时，构建的路径基于用于工作目录(<code>System.getProperty(&quot;user.dir&quot;)</code>);当路径为绝对路径时，构建的路径为绝对路径</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">Paths.get(<span class="hljs-string">&quot;path&quot;</span>);<br>Paths.get(<span class="hljs-string">&quot;path&quot;</span>, <span class="hljs-string">&quot;test&quot;</span>);<br>Paths.get(<span class="hljs-string">&quot;/home&quot;</span>, <span class="hljs-string">&quot;path&quot;</span>)<br></code></pre></td></tr></table></figure><h4 id="2、resolve、resolveSibling组合路径"><a href="#2、resolve、resolveSibling组合路径" class="headerlink" title="2、resolve、resolveSibling组合路径"></a>2、<code>resolve</code>、<code>resolveSibling</code>组合路径</h4><p><code>this.resolve(other)</code>:<br><code>other</code>可以为<code>Path</code>也可以为字符路径  </p><ul><li>如果<code>other</code>是绝对路径，则结果就是<code>other</code></li><li>如果<code>other</code>是相对路径，则结果为 <code>this + other</code> 构成的路径<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">Path base = Paths.get(<span class="hljs-string">&quot;/home/path&quot;</span>);<br>Path target = base.resolve(<span class="hljs-string">&quot;work&quot;</span>);<br>输出：/home/path/work<br><br>Path base = Paths.get(<span class="hljs-string">&quot;/home/path&quot;</span>);<br>Path target = base.resolve(<span class="hljs-string">&quot;/home/work&quot;</span>);<br>输出：/home/work<br></code></pre></td></tr></table></figure></li></ul><p><code>this.resolveSibling(other)</code>:<br>解析指定路径的父路径产生其兄弟路径  </p><ul><li>如果<code>other</code>是绝对路径，则结果就是<code>other</code></li><li>如果<code>other</code>是相对路径，则结果为<code>this</code>的父路径拼接<code>other</code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">Path base = Paths.get(<span class="hljs-string">&quot;/home/path&quot;</span>);<br>Path target = base.resolveSibling(<span class="hljs-string">&quot;work&quot;</span>);<br>输出：/home/work<br><br>Path base = Paths.get(<span class="hljs-string">&quot;/home/path&quot;</span>);<br>Path target = base.resolveSibling(<span class="hljs-string">&quot;/home/work&quot;</span>);<br>输出：/home/work<br></code></pre></td></tr></table></figure></li></ul><h4 id="3、relativize相对路径解析"><a href="#3、relativize相对路径解析" class="headerlink" title="3、relativize相对路径解析"></a>3、<code>relativize</code>相对路径解析</h4><p>相对于<code>other</code>的路径，即有当前路径访问<code>other</code>的相对路径</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">Path base = Paths.get(<span class="hljs-string">&quot;/home/path&quot;</span>);<br>Path other = Paths.get(<span class="hljs-string">&quot;/home/user/work&quot;</span>);<br>Path target = base.relativize(other);<br>输出：../user/work<br></code></pre></td></tr></table></figure><h4 id="4、toAbsolutePath转为绝对路径"><a href="#4、toAbsolutePath转为绝对路径" class="headerlink" title="4、toAbsolutePath转为绝对路径"></a>4、<code>toAbsolutePath</code>转为绝对路径</h4><p>生成的绝对路径可能会包含<code>.</code>,<code>..</code><br>例如基于<code>relativize</code>生成的绝对路径为:<code>/Users/user/Workspace/../user/work</code></p><h4 id="5、normalize路径格式化"><a href="#5、normalize路径格式化" class="headerlink" title="5、normalize路径格式化"></a>5、<code>normalize</code>路径格式化</h4><p>移除路径中的<code>.</code>,<code>..</code>等冗余的路径元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">对 /Users/user/Workspace/../user/work 执行normalize后 /Users/user/user/work<br></code></pre></td></tr></table></figure><h4 id="6、其他"><a href="#6、其他" class="headerlink" title="6、其他"></a>6、其他</h4><p><code>getParent</code>:返回父路径或者null<br><code>getFileName</code>:返回该路径的最后一个部件<br><code>getRoot</code>:返回该路径的根路径</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Jmeter简单使用介绍</title>
    <link href="/2021/12/06/2020-03-07-%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    <url>/2021/12/06/2020-03-07-%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/</url>
    
    <content type="html"><![CDATA[<p>Jmeter简单使用介绍</p><h3 id="一、准备"><a href="#一、准备" class="headerlink" title="一、准备"></a>一、准备</h3><p>新建个人工作空间<code>Workspace</code>，后续所有操作基于该目录  </p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">Windows:</span> E:/Workspace<br><span class="hljs-symbol">Linux:</span> ~/Workspace<br></code></pre></td></tr></table></figure><h3 id="二、Jmeter使用"><a href="#二、Jmeter使用" class="headerlink" title="二、Jmeter使用"></a>二、Jmeter使用</h3><h4 id="1、安装jdk或者jre运行环境"><a href="#1、安装jdk或者jre运行环境" class="headerlink" title="1、安装jdk或者jre运行环境"></a>1、安装jdk或者jre运行环境</h4><h4 id="2、下载安装Jmeter"><a href="#2、下载安装Jmeter" class="headerlink" title="2、下载安装Jmeter"></a>2、下载安装Jmeter</h4><p>访问<a href="https://jmeter.apache.org/">https://jmeter.apache.org/</a>,选择左侧<code>Download Releases</code><br>选择下载<code>zip</code>文件<br><img src="/images/jmeter/jmeter-download.png" alt="jmeter-download"></p><h4 id="3、将jmeter解压到Workspace目录"><a href="#3、将jmeter解压到Workspace目录" class="headerlink" title="3、将jmeter解压到Workspace目录"></a>3、将<code>jmeter</code>解压到<code>Workspace</code>目录</h4><p><code>Windows</code>平台使用解压工具(Winrar,7Zip…)<br><code>Linux</code>平台:<code>unzip apache-jmeter-xxxx.zip</code></p><h4 id="4、运行jmeter"><a href="#4、运行jmeter" class="headerlink" title="4、运行jmeter"></a>4、运行<code>jmeter</code></h4><p>进入解压后的<code>jmeter/bin</code>目录<br><code>Windows</code>：运行<code>jmeter.bat</code><br><code>Linux</code>：<code>./jmeter.sh</code>如果无执行权限，运行 <code>chmod +x jmeter.sh</code></p><h4 id="5、运行测试集"><a href="#5、运行测试集" class="headerlink" title="5、运行测试集"></a>5、运行测试集</h4><ol><li><p>新建线程组<br><img src="/images/jmeter/thread-group.png" alt="线程组"></p></li><li><p>线程组属性配置<br>设置线程组名称<br>执行测试单元失败后的行为<br>线程数，循环次数– 并发场景测试<br><img src="/images/jmeter/thread-group-setting.png" alt="线程组属性"></p></li><li><p>保存测试计划，生成<code>jmx</code>文件<br>将文件保存到<code>Workspace/jmeter</code>  </p></li><li><p>设置http请求默认值<br>一些默认的协议、地址、端口等通用配置<br><img src="/images/jmeter/request-default.png"><br><img src="/images/jmeter/request-default-value.png"></p></li><li><p>添加HTTP信息头管理器<br>header通用参数，例如<code>Content-Type</code>,<code>Authorization</code></p></li></ol><p><img src="/images/jmeter/header-add.png"></p><p><img src="/images/jmeter/header.png"></p><ol start="6"><li><p>添加HTTP请求<br>不需要执行的HTTP请求可以禁用<br>此处根据接口定义选择对应的方法，常用有<code>GET POST DELTE PUT</code>，由于前边已经配置请求默认值，此处可以不用重复配置地址、端口、编码信息<br><img src="/images/jmeter/http-request.png"><br><img src="/images/jmeter/get.png"><br>请求参数格式为<code>json</code>对象示例：<br><img src="/images/jmeter/add.png"></p></li><li><p>添加查看结果树<br>结果树红色为请求错误，绿色为请求正确<br>检测请求结果日志，通过观察结果树，可以查看到请求参数以及相应内容<br><img src="/images/jmeter/request-result.png"><br>请求参数查看：<br><img src="/images/jmeter/result-request.png"><br>请求参数错误，请求错误返回错误信息，可以在此处查看原因<br><img src="/images/jmeter/result-response-error.png"><br>通过结果树中的日志可以确认接口是由于header中未设置<code>Content-Type</code>导致，增加后重新测试可以得到正确结果<br><img src="/images/jmeter/request-response-success.png"></p></li><li><p>结果断言<br>对请求成功的接口响应内容是否合法，符合预期做判断(http请求成功，不代表接口执行成功)<br><img src="/images/jmeter/assert.png"></p></li></ol><ul><li>响应断言 对结果文本代码等做判断  </li><li>JSON断言–返回结果为json时<br><img src="/images/jmeter/json-assert.png"></li></ul><ol start="9"><li>自定义变量<br>借助自定义变量可以将一些通用配置放置到外部文件中，例如用户名、密码<br>自定义变量取值方式：<code>$&#123;参数名&#125;</code><br>此处可以借助<code>jmeter</code>内置函数<code>__CSVReader</code>读取<code>csv</code>文本格式数据,在自定义变量中设置值为内置函数字符串时，可能存在读取换行问题，需要手动增加<code>next</code><br>可以通过将<code>csv</code>路径和取值列索引作为自定义参数(避免路径出现在多个地方，后期修改不方便)，在参数实际使用位置替换即可，并且可以实现自动读取下一行，示例如下：<br><img src="/images/jmeter/custom_params.png"><br><img src="/images/jmeter/csvreader.png">  </li></ol>]]></content>
    
    
    <categories>
      
      <category>自动化</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Selenium简单使用介绍</title>
    <link href="/2021/12/06/2020-03-07-selenium%E4%BD%BF%E7%94%A8/"/>
    <url>/2021/12/06/2020-03-07-selenium%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>Selenium简单使用介绍</p><p>部分测试基于百度首页</p><p>本地html读取方式<code>driver.get(&#39;file:///Workspace/static-web/selenium.html&#39;) </code>  </p><p>以下内容基于:<br><code>Python 3.7.4</code><br><code>selenium 3.141.0</code><br><code>Chrome 80.0.3987.132 64bit</code></p><h3 id="一、安装准备"><a href="#一、安装准备" class="headerlink" title="一、安装准备"></a>一、安装准备</h3><ul><li><code>python</code>模块安装<blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">pip install selenium<br>conda install selenium<br></code></pre></td></tr></table></figure></blockquote></li><li><code>WebDriver</code>下载安装<blockquote><p><a href="https://chromedriver.storage.googleapis.com/index.html" target="_blank">Google</a> 驱动版本需要与浏览器版本对应<br><a href="https://github.com/mozilla/geckodriver/releases" target="_blank">Firefox</a></p></blockquote></li><li>驱动识别引入<blockquote><p>将文件路径添加到系统环境变量 <code>PATH</code>中<br>直接将驱动文件放置到python安装目录下的 <code>bin</code> 目录中</p></blockquote></li></ul><h3 id="二、使用"><a href="#二、使用" class="headerlink" title="二、使用"></a>二、使用</h3><h4 id="1、控制并打开浏览器窗口"><a href="#1、控制并打开浏览器窗口" class="headerlink" title="1、控制并打开浏览器窗口"></a>1、控制并打开浏览器窗口</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> selenium <span class="hljs-keyword">import</span> webdriver<br><br><span class="hljs-number">1</span>、selenium版本较高时，推荐使用，避免测试结束忘记关闭<br><span class="hljs-keyword">with</span> webdriver.Chrome() <span class="hljs-keyword">as</span> driver:<br>    driver.get(<span class="hljs-string">&quot;http://www.baidu.com&quot;</span>)<br><br><span class="hljs-number">2</span>、学习阶段建议使用，可以观察到某些变化<br>driver = webdriver.Chrome()<br>driver.get(<span class="hljs-string">&quot;htttp://www.baidu.com&quot;</span>)<br>driver.close()<br></code></pre></td></tr></table></figure><h4 id="2、元素定位"><a href="#2、元素定位" class="headerlink" title="2、元素定位"></a>2、元素定位</h4><p>推荐顺序 id &gt; css 选择器<br><code>XPATH</code>定位准确编写复杂且不利于<code>debug</code><br>链接文本(部分)只适用于 <code>a</code> 链接元素</p><p>以下内容返回第一个匹配的元素，适用<code>find_elements_xx</code>可返回多个元素<br>|定位元素|示例|使用方式|<br>-|-|-<br>class名称|<code>class=&quot;index-logo-src&quot;</code>|<code>driver.find_element_by_class_name(&#39;index-logo-src&#39;)</code><br>css选择器|<code>#lg .index-logo-src</code>|<code>driver.find_element_by_css_selector(&#39;#lg .index-logo-src&#39;)</code><br>id|<code>#lg</code>|<code>driver.find_element_by_id(&#39;#lg&#39;)</code><br>name|<code>name=&quot;mp&quot;</code>|<code>driver.find_element_by_name(&#39;mp&#39;)</code><br>链接部分显示不符|<code>&lt;a&gt;更多产品&lt;/a&gt;</code>|<code>driver.find_element_by_link_text(&#39;更多产品&#39;)</code><br>链接文本部分|<code>&lt;a&gt;更多产品&lt;/a&gt;</code>|<code>driver.find_element_by_partial_link_text(&#39;更多&#39;)</code><br>tag标签|<code>&lt;map&gt;&lt;/map&gt;</code>|<code>driver.find_element_by_tag_name(&#39;map&#39;)</code><br>xpath选择|<code>class=&quot;index-logo-src&quot;</code>|<code>driver.find_element_by_xpath(&#39;//div//img[@class=&quot;index-logo-src&quot;]&#39;)</code></p><h4 id="3、控制浏览器"><a href="#3、控制浏览器" class="headerlink" title="3、控制浏览器"></a>3、控制浏览器</h4><table><thead><tr><th>操作</th><th>方法</th></tr></thead><tbody><tr><td>打开浏览器</td><td><code>driver.get(&#39;http://www.baidu.com&#39;)</code></td></tr><tr><td>当前地址</td><td><code>driver.current_url</code></td></tr><tr><td>前进</td><td><code>driver.forward()</code></td></tr><tr><td>后退</td><td><code>driver.back()</code></td></tr><tr><td>刷新</td><td><code>driver.refresh()</code></td></tr><tr><td>标题</td><td><code>driver.title</code></td></tr><tr><td>当前窗口<code>handle</code></td><td><code>driver.current_window_handle</code></td></tr><tr><td>退出</td><td><code>driver.quit()</code></td></tr><tr><td>窗口大小</td><td><code>driver.get_window_size().get(&quot;width&quot;)</code> <code>height</code></td></tr><tr><td>重置窗口</td><td><code>driver.set_window_size(1024, 768)</code></td></tr><tr><td>窗口位置</td><td><code>driver.get_window_position().get(&#39;x&#39;)</code></td></tr><tr><td>设置窗口位置</td><td><code>driver.set_window_position(0, 0)</code></td></tr><tr><td>窗口最大化</td><td><code>driver.maximize_window()</code></td></tr><tr><td>全屏</td><td><code>driver.fullscreen_window()</code></td></tr></tbody></table><p>切换窗口 – 官网示例<br>如果点击链接后会打开新的<code>tab</code>窗口，必须要切换窗口，<code>driver</code>才会跟着切换到新的窗口</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-keyword">from</span> selenium <span class="hljs-keyword">import</span> webdriver<br><span class="hljs-keyword">from</span> selenium.webdriver.support.ui <span class="hljs-keyword">import</span> WebDriverWait<br><span class="hljs-keyword">from</span> selenium.webdriver.support <span class="hljs-keyword">import</span> expected_conditions <span class="hljs-keyword">as</span> EC<br><br><span class="hljs-comment"># Start the driver</span><br><span class="hljs-keyword">with</span> webdriver.Firefox() <span class="hljs-keyword">as</span> driver:<br>    <span class="hljs-comment"># Open URL</span><br>    driver.get(<span class="hljs-string">&quot;https://seleniumhq.github.io&quot;</span>)<br><br>    <span class="hljs-comment"># Setup wait for later</span><br>    wait = WebDriverWait(driver, <span class="hljs-number">10</span>)<br><br>    <span class="hljs-comment"># Store the ID of the original window</span><br>    original_window = driver.current_window_handle<br><br>    <span class="hljs-comment"># Check we don&#x27;t have other windows open already</span><br>    <span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(driver.window_handles) == <span class="hljs-number">1</span><br><br>    <span class="hljs-comment"># Click the link which opens in a new window</span><br>    driver.find_element_by_link_text(<span class="hljs-string">&quot;new window&quot;</span>).click()<br><br>    <span class="hljs-comment"># Wait for the new window or tab</span><br>    wait.until(EC.number_of_windows_to_be(<span class="hljs-number">2</span>))<br><br>    <span class="hljs-comment"># Loop through until we find a new window handle</span><br>    <span class="hljs-keyword">for</span> window_handle <span class="hljs-keyword">in</span> driver.window_handles:<br>        <span class="hljs-keyword">if</span> window_handle != original_window:<br>            driver.switch_to.window(window_handle)<br>            <span class="hljs-keyword">break</span><br><br>    <span class="hljs-comment"># Wait for the new tab to finish loading content</span><br>    wait.until(EC.title_is(<span class="hljs-string">&quot;SeleniumHQ Browser Automation&quot;</span>))<br>  <br></code></pre></td></tr></table></figure><h4 id="4、等待"><a href="#4、等待" class="headerlink" title="4、等待"></a>4、等待</h4><p>等待期望元素加载完成。默认等待策略检测<code>document.readyState</code>状态变为<code>complete</code>，此时如果有<code>script</code>脚本创建元素，可能会出现无法定位到的情况</p><ul><li><p>显示等待</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">10</span>:等待时间 秒<br>WebDriverWait(driver, timeout=<span class="hljs-number">10</span>).until(<span class="hljs-keyword">lambda</span> d: d.find_element_by_class_name(<span class="hljs-string">&#x27;index-logo-src&#x27;</span>))<br></code></pre></td></tr></table></figure><p>  等待条件<br>  详情见<code>from selenium.webdriver.support import expected_conditions</code></p><blockquote><p>弹窗 - 警告 提示 确认<br>元素存在<br>元素可见<br>标题包含<br>标题是  </p></blockquote></li><li><p>隐式等待<br>适合于明确页面元素加载需要一定时间</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">driver = webdriver.Chrome()<br>driver.implicitly_wait(<span class="hljs-number">10</span>)<br></code></pre></td></tr></table></figure></li><li><p>FluentWait<br>可以配置等待时间，检查频率以及对某些异常的忽略  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">wait = WebDriverWait(driver, timeout=<span class="hljs-number">10</span>, poll_frequency=<span class="hljs-number">1</span>, ignored_exceptions=NoSuchElementException)<br>wait.until(EC.element_to_be_clickable(By.XPATH, <span class="hljs-string">&quot;//div&quot;</span>))<br></code></pre></td></tr></table></figure><h4 id="5、JavaScript弹窗"><a href="#5、JavaScript弹窗" class="headerlink" title="5、JavaScript弹窗"></a>5、<code>JavaScript</code>弹窗</h4><p>识别<code>JavaScript</code>弹出的<code>警告、确认、提示</code></p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python">alert = wait.until(EC.alert_is_present())<br>// 警告 alert()<br>text = alert.text  <span class="hljs-comment"># 弹窗文本</span><br>alert.accept()  <span class="hljs-comment"># 确认</span><br><br>// 确认 confirm()<br>text = alert.text  <span class="hljs-comment"># 弹窗文本</span><br>alert.accept()  <span class="hljs-comment"># 确认</span><br>alert.dismiss()  <span class="hljs-comment"># 取消</span><br><br>// 提示框 prompt() 需要输入文本<br>alert = Alert(driver)<br>alert.send_keys(<span class="hljs-string">&quot;Selenium&quot;</span>)  <span class="hljs-comment"># 测试时在chrome未生效</span><br>alert.accept()<br></code></pre></td></tr></table></figure></li></ul><h4 id="6、系统键"><a href="#6、系统键" class="headerlink" title="6、系统键"></a>6、系统键</h4><p><code>ActionChains</code>需要使用<code>perform()</code>才会生效<br><strong>send_keys:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> selenium <span class="hljs-keyword">import</span> webdriver<br><span class="hljs-keyword">from</span> selenium.webdriver.common.keys <span class="hljs-keyword">import</span> Keys<br><br>driver = webdriver.Chrome()<br>driver.get(<span class="hljs-string">&#x27;http://www.baidu.com&#x27;</span>)<br>driver.find_element_by_id(<span class="hljs-string">&#x27;kw&#x27;</span>).send_keys(<span class="hljs-string">&#x27;selenium&#x27;</span> + Keys.ENTER)<br></code></pre></td></tr></table></figure><p><strong>keyDown:模拟按下修改键（CONTROL，SHIFT，ALT）的动作</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">action = webdriver.ActionChains(driver)<br><br>action.key_down(Keys.CONTROL).send_keys(<span class="hljs-string">&quot;a&quot;</span>).perform()<br></code></pre></td></tr></table></figure><p><strong>keyUp:模拟修改键（CONTROL，SHIFT，ALT）的向上（或）释放操作</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">search = driver.find_element_by_id(<span class="hljs-string">&#x27;kw&#x27;</span>)<br>action.key_down(Keys.SHIFT)\<br>    .send_keys_to_element(search, <span class="hljs-string">&#x27;qwerty&#x27;</span>)\<br>    .key_up(Keys.SHIFT)\<br>    .send_keys(<span class="hljs-string">&#x27;qwerty&#x27;</span>)\<br>    .perform()<br><br>传入内容：QWERTYqwerty<br></code></pre></td></tr></table></figure><p><strong>clear:清空文本</strong>  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">search.clear()<br></code></pre></td></tr></table></figure><h4 id="7、示例"><a href="#7、示例" class="headerlink" title="7、示例"></a>7、示例</h4><p>以百度搜索，进入百度翻译，并修改翻译内容为例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> selenium <span class="hljs-keyword">import</span> webdriver<br><span class="hljs-keyword">from</span> selenium.webdriver.common.keys <span class="hljs-keyword">import</span> Keys<br><span class="hljs-keyword">from</span> selenium.webdriver.support.ui <span class="hljs-keyword">import</span> WebDriverWait<br><span class="hljs-keyword">from</span> selenium.webdriver.support <span class="hljs-keyword">import</span> expected_conditions <span class="hljs-keyword">as</span> EC<br><span class="hljs-keyword">from</span> selenium.webdriver.common.action_chains <span class="hljs-keyword">import</span> ActionChains<br><br>driver = webdriver.Chrome()<br><br>driver.get(<span class="hljs-string">&#x27;http://www.baidu.com&#x27;</span>)<br>driver.maximize_window()<br><span class="hljs-comment"># driver.implicitly_wait(5)  # 隐式等待 不要和显示等待混用</span><br><br><span class="hljs-comment"># 返回单个元素</span><br>driver.find_element_by_id(<span class="hljs-string">&#x27;kw&#x27;</span>)\<br>    .send_keys(<span class="hljs-string">&#x27;qwerty&#x27;</span> + Keys.ENTER)<br><br>wait = WebDriverWait(driver, timeout=<span class="hljs-number">10</span>)  <span class="hljs-comment"># 显示等待 超时10秒</span><br><br>wait.until(EC.title_contains(<span class="hljs-string">&#x27;qwerty&#x27;</span>))<br><br>divs = driver.find_elements_by_css_selector(<span class="hljs-string">&#x27;#content_left div&#x27;</span>)  <span class="hljs-comment"># 返回list</span><br><br>ele = <span class="hljs-literal">None</span><br><span class="hljs-keyword">for</span> div <span class="hljs-keyword">in</span> divs:<br>    text = div.text<br>    <span class="hljs-comment"># 匹配需要的元素</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;Qwerty_百度翻译&#x27;</span> <span class="hljs-keyword">in</span> text:<br>        ele = div<br>        <span class="hljs-keyword">break</span><br><br>a = ele.find_element_by_partial_link_text(<span class="hljs-string">&#x27;百度翻译&#x27;</span>)<br><span class="hljs-built_in">print</span>(a.get_attribute(<span class="hljs-string">&#x27;href&#x27;</span>))<br><br>origin_window = driver.current_window_handle  <span class="hljs-comment"># 获取当前窗口</span><br>a.click()<br><br><span class="hljs-comment"># 迭代所有窗口,窗口切换,切换driver指向, 按需求保存窗口</span><br><span class="hljs-keyword">for</span> win <span class="hljs-keyword">in</span> driver.window_handles:<br>    <span class="hljs-built_in">print</span>(win)  <br>    <span class="hljs-keyword">if</span> win != origin_window:<br>        driver.switch_to.window(win)<br><br>wait.until(EC.title_is(<span class="hljs-string">&#x27;百度翻译&#x27;</span>))<br><br><span class="hljs-comment"># 如果不做窗口切换,driver指向的还是上一个窗口</span><br><span class="hljs-built_in">input</span> = driver.find_element_by_id(<span class="hljs-string">&#x27;baidu_translate_input&#x27;</span>)<br><span class="hljs-built_in">input</span>.clear()  <span class="hljs-comment"># 清空</span><br><span class="hljs-comment"># input.send_keys(&#x27;baidu&#x27;)</span><br><br><span class="hljs-comment"># 此处需要使用perform后才会生效</span><br>action = ActionChains(driver)<br>action.key_down(Keys.SHIFT).send_keys_to_element(<span class="hljs-built_in">input</span>, <span class="hljs-string">&#x27;baidu&#x27;</span>).perform()<br><br>driver.close()  <span class="hljs-comment"># 关闭翻译链接新创建窗口,如果需要继续使用旧的窗口,需要进行switch_to</span><br>driver.switch_to.window(origin_window)<br>driver.close()  <span class="hljs-comment"># 关闭初始创建窗口</span><br>driver.quit() <span class="hljs-comment"># 观察效果的时候需要注释   关闭窗口并且推出webdriver execute</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>自动化</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Java忽略https证书验证</title>
    <link href="/2021/12/06/2020-03-30-Java%E5%BF%BD%E7%95%A5https%E8%AF%81%E4%B9%A6%E9%AA%8C%E8%AF%81/"/>
    <url>/2021/12/06/2020-03-30-Java%E5%BF%BD%E7%95%A5https%E8%AF%81%E4%B9%A6%E9%AA%8C%E8%AF%81/</url>
    
    <content type="html"><![CDATA[<p>Java忽略https证书验证</p><p>   项目开发过程中，尤其内部项目可能会用到自签名证书，这个时候就需要忽略对证书的验证。</p><p>版本环境：  </p><blockquote><p>jdk 1.8<br>httpclient-4.5.5</p></blockquote><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> HttpComponentsClientHttpRequestFactory httpRequesetFactory;<br><br><span class="hljs-keyword">static</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        SSLContext sslContext = SSLContextBuilder.creaet()<br>                        .loadTrustMaterial(<span class="hljs-keyword">new</span> TrustAllStrategy());<br>                        .build();<br><br>        HostnameVerifier allowAllHosts = <span class="hljs-keyword">new</span> NoopHostnameVerifier();<br>        SSLConnectionSocketFactory factory = <span class="hljs-keyword">new</span> SSLConnectionSocketFactory(sslContext, allowAllHosts);<br><br>        CloseableHttpClient httpClient = HttpClients.custom()<br>                .setSSLSocketFactory(factory)<br>                .setMacConnTotal(<span class="hljs-number">1000</span>)<br>                .setMaxConnPerRoute(<span class="hljs-number">200</span>)  <span class="hljs-comment">// 单个路由地址请求并发数</span><br>                .build();<br><br>        httpRequesetFactory = <span class="hljs-keyword">new</span> HttpComponentsClientHttpRequestFactory(httpClient);<br>    &#125; <span class="hljs-keyword">catch</span> (Exeception e) &#123;<br>        log.error(e.getMessage, e);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Java单元测试</title>
    <link href="/2021/12/06/2019-09-27-Java%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
    <url>/2021/12/06/2019-09-27-Java%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</url>
    
    <content type="html"><![CDATA[<p>Java单元测试</p><p>单元测试：只测试系统中最原子化的行为单元的自动化测试–测试核心逻辑</p><p>简单设计4原则：</p><blockquote><p>测试变绿–测试通过<br>没有重复–代码没有重复<br>揭示意图–测试什么功能<br>最少元素  </p></blockquote><p>单元测试策略：变红(单元测试)-&gt;变绿(烂代码)-&gt;重构(优化)</p><h3 id="测试替身"><a href="#测试替身" class="headerlink" title="测试替身"></a>测试替身</h3><blockquote><p>SUT System Under Test<br>DOC Dependence On Component</p></blockquote><h3 id="Mockito"><a href="#Mockito" class="headerlink" title="Mockito"></a>Mockito</h3><ul><li>Mock – 不关心数据的输入和输出，验证mock的方法是否被调用过<ul><li>验证行为</li><li>屏蔽行为</li></ul></li><li>Stub – 数据的伪造，替换真实数据<ul><li>状态模拟</li></ul></li><li>Spy<ul><li>假中有真</li></ul></li></ul><p>采用Mockito和PowerMockito进行单元测试<br>以下单元测试案例执行基于：<br>Spring Boot 1.5.6.RELEASE<br>Mockito 2.25.1<br>PowerMockito 2.0.2<br>Jacoco 0.8.2</p><h3 id="1、属性注入"><a href="#1、属性注入" class="headerlink" title="1、属性注入"></a>1、属性注入</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.test.util.ReflectionTestUtils;<br><br>ReflectionTestUtils.setField(被测试类, <span class="hljs-string">&quot;属性名&quot;</span>, 属性实际值);<br></code></pre></td></tr></table></figure><h3 id="2、调用方法中有-new-操作"><a href="#2、调用方法中有-new-操作" class="headerlink" title="2、调用方法中有 new 操作"></a>2、调用方法中有 new 操作</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 类级别使用如下注解</span><br><span class="hljs-meta">@RunWith(PowerMockRunner.class)</span><br><span class="hljs-comment">// 方法层使用如下注解</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-meta">@PrepareForTest(value = &#123;被测试类.class, 需要new的类.class&#125;)</span><br><br><span class="hljs-comment">// 例如：</span><br><span class="hljs-meta">@RunWith(PowerMockRunner.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyTest</span> </span>&#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-meta">@PrepareForTest(value = &#123;Test.class, Date.class&#125;)</span> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span> </span>&#123;<br>        Date date = PoweerMockito.mock(Date.class);<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            PowerMockito.whenNew(Date.class).withNoArguments().thenReturn(date);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3、静态方法"><a href="#3、静态方法" class="headerlink" title="3、静态方法"></a>3、静态方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 类级别使用如下注解</span><br><span class="hljs-meta">@RunWith(PowerMockRunner.class)</span><br><span class="hljs-comment">// 方法层使用如下注解</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-meta">@PrepareForTest(value = &#123;被测试类.class, 需要使用的静态方法所属类.class&#125;)</span><br><br><span class="hljs-comment">// 例如：</span><br><br><span class="hljs-meta">@RunWith(PowerMockRunner.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyTest</span> </span>&#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-meta">@PrepareForTest(value = &#123;Test.class, EncodeUtils.class&#125;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span> </span>&#123;<br>        PowerMockito.mockStatic(EncodeUtils.class);<br>        PowerMockito.when(EncodeUtils.decript(passwd, key)).thenReturn(plainPwd);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4、一般方法"><a href="#4、一般方法" class="headerlink" title="4、一般方法"></a>4、一般方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// mock操作，提供</span><br>doReturn(xxx).when(mockXX).executeMethod();<br>doThrow(Exception.class)<br>doNothing()<br><br><span class="hljs-comment">// 验证</span><br>verify(mockXX, times(调用次数)).executeMethod()<br><br></code></pre></td></tr></table></figure><h3 id="5、单元测试使用PowerMockito时，jacoco覆盖率无法兼容解决"><a href="#5、单元测试使用PowerMockito时，jacoco覆盖率无法兼容解决" class="headerlink" title="5、单元测试使用PowerMockito时，jacoco覆盖率无法兼容解决"></a>5、单元测试使用PowerMockito时，jacoco覆盖率无法兼容解决</h3><p>参考 <a href="https://github.com/powermock/powermock-examples-maven/blob/master/jacoco-offline/pom.xml">https://github.com/powermock/powermock-examples-maven/blob/master/jacoco-offline/pom.xml</a><br>生成html覆盖报告，可以修改为如下内容：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;execution&gt;<br>  &lt;id&gt;report&lt;/id&gt;<br>  &lt;phase&gt;prepare-<span class="hljs-keyword">package</span>&lt;/phase&gt;<br>  &lt;goals&gt;<br>      &lt;goal&gt;report&lt;/goal&gt;<br>  &lt;/goals&gt;<br>  &lt;configuration&gt;<br>      &lt;dataFile&gt;$&#123;project.build.directory&#125;/coverage.exec&lt;/dataFile&gt;<br>      &lt;outputDirectory&gt;$&#123;basedir&#125;/target/coverage-reports&lt;/outputDirectory&gt;<br>  &lt;/configuration&gt;<br>&lt;execution&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
